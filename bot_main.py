# bot_main.py
import asyncio
import os
import time
from typing import Optional, Dict, Tuple

from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from dotenv import load_dotenv

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—Å–µ –±–µ—Ä–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
from keyboards import (
    main_menu, modes_kb,
    gender_self_kb, seeking_kb, faculties_kb,
    about_kb, photos_empty_kb, photos_progress_kb,
    cancel_kb, anon_chat_menu_kb, subscription_kb,
    reveal_entry_menu
)

# —Å—Ö–µ–º–∞ –ë–î –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä ‚Äî –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from db_schema import db, init_db, DB_PATH

# –¥–æ–ø. —Ñ–∏—á–∏ (–º–∞–≥–∞–∑–∏–Ω/—Å–∞–ø–ø–æ—Ä—Ç/—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞) –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é
from features_extra import setup_extra_features, extra_main_menu

INACTIVITY_SECONDS = 180  # —Ç–∞–π–º–∞—É—Ç –º–æ–ª—á–∞–Ω–∏—è

# ================== CONFIG ==================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

# –ê–¥–º–∏–Ω—ã. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∏–∑ .env
ADMIN_IDS = set(int(x) for x in (os.getenv("ADMIN_IDS", "") or "").split(",") if x.strip())
SUPPORT_ENABLED = True
DAILY_BONUS_POINTS = 10
CHANNEL_USERNAME = "@nektomephi"           # —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/nektomephi"   # —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
RESOLVED_CHANNEL_ID: Optional[int] = None  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ main()
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

INTRO_TEXT = (
    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: t.me/nektomephi\n\n"
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ò–§–ò</b>.\n\n"
    "!!! –í –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï !!!\n"
    "–ë–æ—Ç <b>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</b> ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, "
    "—Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
    "–≠—Ç–æ –≥–∏–±—Ä–∏–¥ –¥–∞–π–≤–∏–Ω—á–∏–∫–∞ –∏ nekto.me: —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º —Å–æ–≥–ª–∞—Å–∏–∏ "
    "–º–æ–∂–Ω–æ <b>—Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏</b> —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <code>!reveal</code> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã).\n\n"
    "üí° –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>.\n"
    "üìá –†–µ–∂–∏–º <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
    "‚öôÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
    "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.\n"
    "2Ô∏è‚É£ –ü–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª –∏ –Ω–∞—á–Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–∏–∞–ª–æ–≥.\n\n"
    "üí¨ –í–æ –≤—Ä–µ–º—è —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
    "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
    "<code>!stop</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
    "<code>!reveal</code> ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ\n\n"
    "‚ö†Ô∏è –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –º–æ–ª—á–∏—Ç –±–æ–ª–µ–µ 180 —Å–µ–∫—É–Ω–¥, –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É –æ–±–æ–∏—Ö."
)

FACULTIES = [
    "–ò–ò–ö–°", "–§–ë–ò–£–ö–°", "–ò–ú–û", "–ò–§–¢–ò–°",
    "–ò–ù–¢–≠–õ", "–ò–§–¢–≠–ë", "–ò–§–ò–ë", "–õ–ê–ü–õ–ê–ó",
    "–ò–Ø–§–ò–¢"
]

# ================== FSM ==================
class GState(StatesGroup):
    pick_gender = State()
    pick_seeking = State()

class RevealForm(StatesGroup):
    name = State()
    faculty = State()
    age = State()
    about = State()
    photos = State()

# ================== Keyboards (GLOBAL) ==================
@dp.callback_query(F.data == "sub_check")
async def sub_check(c: CallbackQuery):
    if await is_subscribed(c.from_user.id):
        try:
            await c.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        except Exception:
            pass
        await c.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await bot.send_message(
            c.from_user.id,
            INTRO_TEXT,
            disable_web_page_preview=True,
            reply_markup=(await menu_for(<uid>))
        )
    else:
        await c.answer(
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∞ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.",
            show_alert=False
        )

async def gate_subscription(message: Message) -> bool:
    if await is_subscribed(message.from_user.id):
        return True
    text = (
        "üîî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
        "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ—Ö –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∞–≤–∏–ª."
    )
    if RESOLVED_CHANNEL_ID is None:
        text += "\n\n‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞: –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞."
    await message.answer(text, reply_markup=subscription_kb(CHANNEL_LINK))
    return False

def chat_hint() -> str:
    return ("–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n"
            "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
            "<code>!stop</code> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å\n"
            "<code>!reveal</code> ‚Äî –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –µ—Å—Ç—å —É –æ–±–æ–∏—Ö)\n")

# ================== Inactivity monitor (RAM) ==================
# user_id -> (peer_id, match_id)
ACTIVE: Dict[int, Tuple[int, int]] = {}
# user_id -> last_seen_unix
LAST_SEEN: Dict[int, float] = {}
# match_id -> asyncio.Task
WATCH: Dict[int, asyncio.Task] = {}
# match_id -> —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 60 —Å–µ–∫ (True/False)
WARNED: Dict[int, bool] = {}

def _now() -> float:
    return time.time()

async def _watch_inactivity(mid: int, a: int, b: int):
    try:
        while True:
            await asyncio.sleep(5)
            # –µ—Å–ª–∏ –º–∞—Ç—á —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
            if a not in ACTIVE or b not in ACTIVE:
                return
            if ACTIVE.get(a, (None, None))[1] != mid or ACTIVE.get(b, (None, None))[1] != mid:
                return

            na = LAST_SEEN.get(a, _now())
            nb = LAST_SEEN.get(b, _now())
            # --- –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–æ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
            idle = max(_now() - na, _now() - nb)
            remaining = int(INACTIVITY_SECONDS - idle)
            if 0 < remaining <= 60 and not WARNED.get(mid):
                WARNED[mid] = True
                warn_text = (
                    f"‚åõÔ∏è –¢–∏—à–∏–Ω–∞‚Ä¶ –ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫.\n"
                    f"–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
                )
                await bot.send_message(a, warn_text)
                await bot.send_message(b, warn_text)
            # --- –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É ---
            if _now() - na >= INACTIVITY_SECONDS or _now() - nb >= INACTIVITY_SECONDS:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç —É –û–ë–û–ò–•
                await end_current_chat(a)
                await end_current_chat(b)
                _cleanup_match(mid, a, b)

                # –°–æ–æ–±—â–∞–µ–º –û–ë–û–ò–ú –∏ —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await bot.send_message(a, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=main_menu())
                await bot.send_message(b, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=main_menu())
                return
    except asyncio.CancelledError:
        return

def _cleanup_match(mid: int, a: int, b: int):
    ACTIVE.pop(a, None)
    ACTIVE.pop(b, None)
    LAST_SEEN.pop(a, None)
    LAST_SEEN.pop(b, None)
    t = WATCH.pop(mid, None)
    if t and not t.done():
        t.cancel()
    WARNED.pop(mid, None)

# ================== Helpers ==================
async def is_subscribed(user_id: int) -> bool:
    target = RESOLVED_CHANNEL_ID or CHANNEL_USERNAME  # –∏—Å–ø–æ–ª—å–∑—É–µ–º id, –µ—Å–ª–∏ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å
    try:
        cm = await bot.get_chat_member(target, user_id)
        # —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å Enum –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        status = str(getattr(cm, "status", "")).lower()
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫ ‚Äî "member"; –∞–¥–º–∏–Ω/—Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∂–µ –æ–∫
        if status in ("member", "administrator", "creator"):
            return True
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –µ—Å—Ç—å is_member
        if hasattr(cm, "is_member") and bool(getattr(cm, "is_member")):
            return True
        return False
    except Exception as e:
        # –µ—Å–ª–∏ –±–æ—Ç –ù–ï –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞, Telegram –≤–µ—Ä–Ω—ë—Ç 400/403; —Å—á–∏—Ç–∞–µ–º "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        print("is_subscribed error:", repr(e))
        return False

async def ensure_user(tg_id: int):
    async with db() as conn:
        await conn.execute("INSERT OR IGNORE INTO users(tg_id) VALUES(?)", (tg_id,))
        # –µ—Å–ª–∏ tg_id –≤ ADMIN_IDS ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å admin
        if tg_id in ADMIN_IDS:
            await conn.execute("UPDATE users SET role='admin' WHERE tg_id=?", (tg_id,))
        await conn.commit()

async def set_user_fields(tg_id: int, **kwargs):
    if not kwargs:
        return
    cols = ", ".join([f"{k}=?" for k in kwargs.keys()])
    vals = list(kwargs.values()) + [tg_id]
    async with db() as conn:
        await conn.execute(f"UPDATE users SET {cols} WHERE tg_id=?", vals)
        await conn.commit()

async def get_user(tg_id: int):
    async with db() as conn:
        cur = await conn.execute("""SELECT tg_id,gender,seeking,reveal_ready,first_name,last_name,
                                    faculty,age,about,username,photo1,photo2,photo3
                                    FROM users WHERE tg_id=?""", (tg_id,))
        return await cur.fetchone()

async def get_user_or_create(tg_id: int):
    u = await get_user(tg_id)
    if not u:
        await ensure_user(tg_id)
        u = await get_user(tg_id)
    return u

async def start_reveal_form(m: Message, state: FSMContext, is_refill: bool):
    await m.answer(
        "–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è. –ï—ë —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º !reveal.\n"
        "–ê–Ω–∫–µ—Ç—É –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=cancel_kb()
    )
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=cancel_kb())
    await state.update_data(is_refill=is_refill)
    await state.set_state(RevealForm.name)

async def get_role(tg_id:int)->str:
    async with db() as conn:
        cur = await conn.execute("SELECT role FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return row[0] if row else "user"

async def add_points(tg_id:int, delta:int):
    async with db() as conn:
        await conn.execute("UPDATE users SET points = COALESCE(points,0) + ? WHERE tg_id=?", (delta, tg_id))
        await conn.commit()

async def get_points(tg_id:int)->int:
    async with db() as conn:
        cur = await conn.execute("SELECT COALESCE(points,0) FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return int(row[0] if row else 0)

async def set_status(tg_id:int, title:Optional[str]):
    async with db() as conn:
        await conn.execute("UPDATE users SET status_title=? WHERE tg_id=?", (title, tg_id))
        await conn.commit()

async def get_status(tg_id:int)->Optional[str]:
    async with db() as conn:
        cur = await conn.execute("SELECT status_title FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return row[0] if row and row[0] else None

async def has_required_prefs(tg_id: int) -> bool:
    u = await get_user(tg_id)
    if not u:
        return False
    gender = (u[1] or "").strip()
    seeking = (u[2] or "").strip()
    return bool(gender and seeking)

@dp.message(Command("prefs"))
async def prefs(m: Message):
    await ensure_user(m.from_user.id)
    u = await get_user(m.from_user.id)
    await m.answer(f"gender={u[1]!r}\nseeking={u[2]!r}\nreveal_ready={u[3]}")

def format_profile_text(u: tuple) -> str:
    """
    u = (tg_id, gender, seeking, reveal_ready, first_name, last_name,
         faculty, age, about, username, photo1, photo2, photo3)
    """
    first = (u[4] or "").strip()
    last = (u[5] or "").strip()
    # –í –∑–∞–≥–æ–ª–æ–≤–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è (–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é, –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ)
    name = first or (last.split()[0] if last else "–ë–µ–∑ –∏–º–µ–Ω–∏")

    age = u[7]
    age_str = str(age) if isinstance(age, int) else "‚Äî"

    faculty = (u[6] or "‚Äî").strip()

    about = (u[8] or "").strip()
    first_line = ""
    rest = ""
    if about:
        lines = [ln.strip() for ln in about.splitlines() if ln.strip()]
        if lines:
            first_line = lines[0]
            if len(lines) > 1:
                rest = "\n".join(lines[1:])

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: –ò–º—è, 18, üìç –ò–ò–ö–° ‚Äî –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    header = f"{name}, {age_str}, üìç {faculty}"
    if first_line:
        header += f" ‚Äî {first_line}"

    # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    body = f"\n{rest}" if rest else ""

    # –ù–∏–∫ –≤ –∫–æ–Ω—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    username = (u[9] or "").strip()
    tail = f"\n\n{username}" if username else ""

    return header + body + tail

async def active_peer(tg_id: int) -> Optional[int]:
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º RAM-–º–∞–ø—É ‚Äî —Ç–∞–∫ –±—ã—Å—Ç—Ä–µ–µ
    if tg_id in ACTIVE:
        return ACTIVE[tg_id][0]
    # fallback –ø–æ –ë–î
    async with db() as conn:
        cur = await conn.execute(
            "SELECT a_id,b_id FROM matches WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (tg_id, tg_id)
        )
        row = await cur.fetchone()
        if not row:
            return None
        a, b = row
        return b if a == tg_id else a

async def end_current_chat(tg_id: int):
    # –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏ –≤ –ë–î
    async with db() as conn:
        await conn.execute("UPDATE matches SET active=0 WHERE active=1 AND (a_id=? OR b_id=?)", (tg_id, tg_id))
        await conn.commit()

async def enqueue(tg_id: int, gender: str, seeking: str):
    async with db() as conn:
        await conn.execute(
            "INSERT OR REPLACE INTO queue(tg_id, gender, seeking, ts) VALUES(?,?,?,strftime('%s','now'))",
            (tg_id, gender, seeking)
        )
        await conn.commit()

async def dequeue(tg_id: int):
    async with db() as conn:
        await conn.execute("DELETE FROM queue WHERE tg_id=?", (tg_id,))
        await conn.commit()

async def record_separation(a: int, b: int):
    async with db() as conn:
        await conn.execute(
            "INSERT INTO recent_partners(u_id,partner_id,block_left) VALUES(?,?,2) "
            "ON CONFLICT(u_id,partner_id) DO UPDATE SET block_left=0",
            (a, b)
        )
        await conn.execute(
            "INSERT INTO recent_partners(u_id,partner_id,block_left) VALUES(?,?,2) "
            "ON CONFLICT(u_id,partner_id) DO UPDATE SET block_left=0",
            (b, a)
        )
        await conn.commit()

async def decay_blocks(u_id: int):
    async with db() as conn:
        await conn.execute(
            "UPDATE recent_partners SET block_left=block_left-1 "
            "WHERE u_id=? AND block_left>0", (u_id,)
        )
        await conn.execute(
            "DELETE FROM recent_partners WHERE u_id=? AND block_left<=0", (u_id,)
        )
        await conn.commit()

async def is_recent_blocked(u_id: int, candidate_id: int) -> bool:
    async with db() as conn:
        cur = await conn.execute(
            "SELECT 1 FROM recent_partners WHERE u_id=? AND partner_id=? AND block_left>0",
            (u_id, candidate_id)
        )
        return (await cur.fetchone()) is not None

async def in_queue(tg_id: int) -> bool:
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM queue WHERE tg_id=?", (tg_id,))
        return (await cur.fetchone()) is not None

# ========== GLOBAL ¬´–û—Ç–º–µ–Ω–∞¬ª ==========
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def global_cancel(m: Message, state: FSMContext):
    # 1) –ï—Å–ª–∏ –∏–¥—ë—Ç –∞–Ω–∫–µ—Ç–∞ ‚Äî —á–∏—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç—É, –∞ –ø–æ–ª/–ø–æ–∏—Å–∫ –æ—Å—Ç–∞—é—Ç—Å—è
    cur_state = await state.get_state()
    if cur_state in {
        RevealForm.name.state, RevealForm.faculty.state,
        RevealForm.age.state, RevealForm.about.state,
        RevealForm.photos.state
    }:
        await set_user_fields(
            m.from_user.id, reveal_ready=0,
            first_name=None, last_name=None, faculty=None,
            age=None, about=None,
            photo1=None, photo2=None, photo3=None
        )
        await state.clear()
        await m.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
        return

    # 2) –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if await in_queue(m.from_user.id):
        await dequeue(m.from_user.id)
        await m.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu())
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# ====== –†–ï–ñ–ò–ú–´ ======
@dp.message(F.text == "üß≠ –†–µ–∂–∏–º—ã")
async def modes_entry(m: Message, state: FSMContext):
    if not await gate_subscription(m):
        return
    await state.clear()
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"
        "‚Ä¢ <b>üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –ª–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
        "‚Ä¢ <b>üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b> ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è",
        reply_markup=modes_kb()
    )

@dp.message(F.text == "üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç")
async def mode_cards(m: Message):
    await m.answer("–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç¬ª ‚Äî <b>–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>.", reply_markup=modes_kb())

@dp.message(F.text == "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç")
async def mode_anon_chat(m: Message):
    if not await gate_subscription(m):
        return
    await m.answer(
        "–†–µ–∂–∏–º ¬´–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=anon_chat_menu_kb()
    )

# ========== MATCHING ==========
async def find_partner(for_id: int) -> Optional[int]:
    async with db() as conn:
        cur = await conn.execute("SELECT gender,seeking FROM users WHERE tg_id=?", (for_id,))
        me = await cur.fetchone()
        if not me:
            return None
        my_gender, my_seek = me

        cur = await conn.execute("""
            SELECT q.tg_id
            FROM queue q
            JOIN users u ON u.tg_id = q.tg_id
            LEFT JOIN recent_partners rp ON rp.u_id=? AND rp.partner_id=q.tg_id AND rp.block_left>0
            WHERE q.tg_id<>?
              AND ((?='–ù–µ –≤–∞–∂–Ω–æ') OR u.gender=CASE ? WHEN '–ü–∞—Ä–Ω–∏' THEN '–ü–∞—Ä–µ–Ω—å' WHEN '–î–µ–≤—É—à–∫–∏' THEN '–î–µ–≤—É—à–∫–∞' END)
              AND (u.seeking='–ù–µ –≤–∞–∂–Ω–æ' OR u.seeking=CASE ? WHEN '–ü–∞—Ä–µ–Ω—å' THEN '–ü–∞—Ä–Ω–∏' WHEN '–î–µ–≤—É—à–∫–∞' THEN '–î–µ–≤—É—à–∫–∏' END)
              AND rp.partner_id IS NULL
            ORDER BY q.ts ASC
            LIMIT 1
        """, (for_id, for_id, my_seek, my_seek, my_gender))
        row = await cur.fetchone()
        if not row:
            return None
        return int(row[0])

async def start_match(a: int, b: int):
    await decay_blocks(a)
    await decay_blocks(b)
    async with db() as conn:
        await conn.execute("DELETE FROM queue WHERE tg_id IN (?,?)", (a, b))
        cur = await conn.execute("INSERT INTO matches(a_id,b_id) VALUES(?,?)", (a, b))
        mid = cur.lastrowid
        await conn.commit()

    # –ó–∞–ø–æ–º–Ω–∏–º —Å–≤—è–∑—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ACTIVE[a] = (b, mid)
    ACTIVE[b] = (a, mid)
    LAST_SEEN[a] = _now()
    LAST_SEEN[b] = _now()
    WATCH[mid] = asyncio.create_task(_watch_inactivity(mid, a, b))

    from aiogram.types import ReplyKeyboardRemove
    await bot.send_message(a, "–ü–æ–¥–∫–ª—é—á–∏–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í—ã –∞–Ω–æ–Ω–∏–º–Ω—ã.\n" + chat_hint(), reply_markup=ReplyKeyboardRemove())
    await bot.send_message(b, "–ü–æ–¥–∫–ª—é—á–∏–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í—ã –∞–Ω–æ–Ω–∏–º–Ω—ã.\n" + chat_hint(), reply_markup=ReplyKeyboardRemove())

async def try_match_now(tg_id: int):
    mate = await find_partner(tg_id)
    if mate:
        await start_match(tg_id, mate)

# ================== /start ==================
@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    if not await gate_subscription(m):
        return
    await ensure_user(m.from_user.id)
    u = await get_user(m.from_user.id)

    # –Ω–æ–≤–∏—á–æ–∫ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if not u or not u[1] or not u[2]:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª
        await m.answer(INTRO_TEXT, disable_web_page_preview=True)
        await m.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å. –ó–∞—Ç–µ–º, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏.",
            reply_markup=gender_self_kb()
        )
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–∞–Ω–∫–µ—Ç—ã) –Ω—É–∂–µ–Ω @username –≤ Telegram. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ.")
        return

    # –µ—Å–ª–∏ —É–∂–µ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# ========== –í—ã–±–æ—Ä –ø–æ–ª–∞ / –∫–æ–≥–æ –∏—â–µ–º ==========
@dp.message(GState.pick_gender)
async def pick_gender_msg(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id)
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    text = (m.text or "").strip().casefold()
    if text not in {"—è –¥–µ–≤—É—à–∫–∞", "—è –ø–∞—Ä–µ–Ω—å"}:
        await m.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: ¬´–Ø –¥–µ–≤—É—à–∫–∞¬ª –∏–ª–∏ ¬´–Ø –ø–∞—Ä–µ–Ω—å¬ª.",
                       reply_markup=gender_self_kb())
        return
    gender = "–î–µ–≤—É—à–∫–∞" if text == "—è –¥–µ–≤—É—à–∫–∞" else "–ü–∞—Ä–µ–Ω—å"
    await set_user_fields(m.from_user.id, gender=gender)
    await m.answer("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=seeking_kb())
    await state.set_state(GState.pick_seeking)

@dp.message(GState.pick_seeking)
async def pick_seeking_msg(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id)
    text = (m.text or "").strip()
    if text not in {"–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–ù–µ –≤–∞–∂–Ω–æ"}:
        await m.answer("–í—ã–±–µ—Ä–∏: ¬´–î–µ–≤—É—à–∫–∏¬ª, ¬´–ü–∞—Ä–Ω–∏¬ª –∏–ª–∏ ¬´–ù–µ –≤–∞–∂–Ω–æ¬ª.", reply_markup=seeking_kb())
        return
    await set_user_fields(m.from_user.id, seeking=text)

    data = await state.get_data()
    after_prefs = data.get("start_form_after_prefs", False)
    is_refill = data.get("is_refill", False)
    await state.update_data(start_form_after_prefs=False)
    await state.clear()

    if after_prefs:
        if not (m.from_user.username or ""):
            await m.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ Telegram –ø–æ–∑–∂–µ.",
                           reply_markup=main_menu())
            return
        await m.answer(
            "–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è. –ï—ë —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º !reveal.\n"
            "–ê–Ω–∫–µ—Ç—É –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
            reply_markup=cancel_kb()
        )
        await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=cancel_kb())
        await state.update_data(is_refill=is_refill)
        await state.set_state(RevealForm.name)
        return

    await m.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=main_menu())

# ================== Reveal Form ==================
@dp.message(RevealForm.name)
async def rf_name(m: Message, state: FSMContext):
    parts = m.text.strip().split()
    first = parts[0]
    last = " ".join(parts[1:]) if len(parts) > 1 else ""
    await set_user_fields(m.from_user.id, first_name=first, last_name=last)
    await m.answer("–° –∫–∞–∫–æ–≥–æ —Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞?", reply_markup=faculties_kb())
    await state.set_state(RevealForm.faculty)

@dp.callback_query(RevealForm.faculty, F.data.startswith("fac:"))
async def rf_fac(c: CallbackQuery, state: FSMContext):
    idx = int(c.data.split(":")[1])
    fac = FACULTIES[idx]
    await set_user_fields(c.from_user.id, faculty=fac)
    await c.message.edit_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{fac}</b>")
    await c.message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=cancel_kb())
    await state.set_state(RevealForm.age)
    await c.answer()

@dp.message(RevealForm.age)
async def rf_age(m: Message, state: FSMContext):
    try:
        age = int(m.text.strip())
        if not (17 <= age <= 99):
            raise ValueError
    except Exception:
        await m.answer("–í–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º 17‚Äì99, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_kb())
        return

    await set_user_fields(m.from_user.id, age=age)

    u = await get_user_or_create(m.from_user.id)
    data = await state.get_data()
    refill = bool(data.get("is_refill"))
    has_prev_about = bool(u[8])
    await m.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=about_kb(refill=refill, has_prev=has_prev_about)
    )
    await state.set_state(RevealForm.about)

# --- —Å–ø–µ—Ü-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª ---
@dp.message(RevealForm.about, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def rf_about_skip(m: Message, state: FSMContext):
    await set_user_fields(m.from_user.id, about=None)
    uname = m.from_user.username or ""
    await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user_or_create(m.from_user.id)
    data = await state.get_data()
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

@dp.message(RevealForm.about, F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ")
async def rf_about_keep(m: Message, state: FSMContext):
    u = await get_user(m.from_user.id)
    if not u[8]:
        await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                       reply_markup=about_kb(refill=False, has_prev=False))
        return
    data = await state.get_data()
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

@dp.message(RevealForm.about)
async def rf_about(m: Message, state: FSMContext):
    text_raw = (m.text or "").strip()
    if text_raw.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return await rf_about_skip(m, state)

    if text_raw and len(text_raw) > 300:
        await m.answer("–°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ (‚â§300 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    await set_user_fields(m.from_user.id, about=(text_raw or None))
    uname = m.from_user.username or ""
    await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user(m.from_user.id)
    data = await state.get_data()
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

# ====== –§–û–¢–û ======
@dp.message(RevealForm.photos, F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ")
async def rf_photos_keep(m: Message, state: FSMContext):
    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ —Ñ–æ—Ç–æ). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
                   reply_markup=main_menu())

@dp.message(RevealForm.photos, F.photo)
async def rf_photos(m: Message, state: FSMContext):
    u = await get_user_or_create(m.from_user.id)
    current = [u[10], u[11], u[12]]
    file_id = m.photo[-1].file_id
    if current[0] is None:
        await set_user_fields(m.from_user.id, photo1=file_id)
        await m.answer("–§–æ—Ç–æ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[1] is None:
        await set_user_fields(m.from_user.id, photo2=file_id)
        await m.answer("–§–æ—Ç–æ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[2] is None:
        await set_user_fields(m.from_user.id, photo3=file_id)
        await m.answer("–§–æ—Ç–æ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
    else:
        await m.answer("–£–∂–µ –µ—Å—Ç—å 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())

@dp.message(RevealForm.photos, F.text == "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ")
async def rf_photos_reset(m: Message, state: FSMContext):
    await set_user_fields(m.from_user.id, photo1=None, photo2=None, photo3=None)
    await m.answer("–í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–¥–æ 3).",
                   reply_markup=photos_empty_kb(refill=False, has_prev=False))

@dp.message(RevealForm.photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def rf_photos_done(m: Message, state: FSMContext):
    u = await get_user(m.from_user.id)
    photos = [u[10], u[11], u[12]]
    if not any(photos):
        await m.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                       reply_markup=photos_empty_kb(refill=False, has_prev=False))
        return
    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.", reply_markup=main_menu())

# ================== –ú–µ–Ω—é –∞–Ω–∫–µ—Ç—ã ==================
@dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def reveal_back_msg(m: Message, state: FSMContext):
    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return
    await state.clear()
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message(F.text == "‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å")
async def reveal_begin_msg(m: Message, state: FSMContext):
    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user_or_create(m.from_user.id)
    ready = bool(u and u[3])
    have_prefs = bool(u and u[1] and u[2])  # gender, seeking

    if have_prefs:
        # –ü–æ–ª –∏ –∏–Ω—Ç–µ—Ä–µ—Å —É–∂–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Å—Ä–∞–∑—É –∫ –∞–Ω–∫–µ—Ç–µ
        await start_reveal_form(m, state, is_refill=ready)
        return

    # –ü–æ–ª/–∏–Ω—Ç–µ—Ä–µ—Å –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º –∏—Ö, –∞ –ø–æ—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏–º –∞–Ω–∫–µ—Ç—É
    await state.update_data(start_form_after_prefs=True, is_refill=ready)
    await m.answer("–ö—Ç–æ —Ç—ã?", reply_markup=gender_self_kb())
    await state.set_state(GState.pick_gender)

# ================== –ü—Ä–æ—Ñ–∏–ª—å/–∞–Ω–∫–µ—Ç–∞ (–≤—Ö–æ–¥) ==================
@dp.message(F.text == "üë§ –ê–Ω–∫–µ—Ç–∞")
async def show_or_edit_reveal(m: Message, state: FSMContext):
    if not await gate_subscription(m):
        return
    await ensure_user(m.from_user.id)
    peer = await active_peer(m.from_user.id)
    if peer:
        await m.answer("–¢—ã —Å–µ–π—á–∞—Å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π !next –∏–ª–∏ !stop.")
        return
    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    ready = bool(u[3]) if u else False
    if not ready:
        await m.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å.", reply_markup=reveal_entry_menu())
        return

    txt = format_profile_text(u)

    photos = [p for p in (u[10], u[11], u[12]) if p]
    if photos:
        for p in photos[:-1]:
            await m.answer_photo(p)
        await m.answer_photo(photos[-1], caption=txt)
    else:
        await m.answer(txt)

    await m.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reveal_entry_menu())

# ================== –ü–æ–∏—Å–∫ / –ú–∞—Ç—á–∏–Ω–≥ ==================
@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
@dp.message(Command("find"))
async def find(m: Message, state: FSMContext):
    if not await gate_subscription(m):
        return
    await ensure_user(m.from_user.id)
    # –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–ø—Ä–æ—Å
    if not await has_required_prefs(m.from_user.id):
        await m.answer(
            "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.",
            reply_markup=gender_self_kb()
        )
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        return

    peer = await active_peer(m.from_user.id)
    if peer:
        await m.answer("–¢—ã —Å–µ–π—á–∞—Å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π !next –∏–ª–∏ !stop.")
        return

    if await in_queue(m.from_user.id):
        await m.answer("–£–∂–µ –∏—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ù–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)  # –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å gender/seeking
    await enqueue(m.from_user.id, gender=u[1], seeking=u[2])
    await m.answer("–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶ –ü–æ–∫–∞ –∏–¥—ë—Ç –ø–æ–∏—Å–∫, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
    await try_match_now(m.from_user.id)

# ================== –†–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π ==================
@dp.message()
async def relay(m: Message, state: FSMContext):
    peer = await active_peer(m.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if not peer:
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –Ω–µ –º–µ—à–∞–µ–º —Å–ø–µ—Ü-—Ö–µ–Ω–¥–ª–µ—Ä–∞–º –∞–Ω–∫–µ—Ç—ã
        cur_state = await state.get_state()
        if cur_state:
            return

        # –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–û—Ç–º–µ–Ω–∞"
        if await in_queue(m.from_user.id):
            await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        else:
            # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ ¬´–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # --- –ù–∏–∂–µ –ª–æ–≥–∏–∫–∞ –†–ï–ê–õ–¨–ù–û–ì–û —á–∞—Ç–∞ ---

    # –æ—Ç–º–µ—Ç–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    LAST_SEEN[m.from_user.id] = _now()

    # –µ—Å–ª–∏ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —á–∞—Ç)
    if m.from_user.id in ACTIVE:
        mid = ACTIVE[m.from_user.id][1]
        if WARNED.pop(mid, None):
            pass

    if m.text:
        t = m.text.strip().lower()
        if t == "!stop":
            if m.from_user.id in ACTIVE:
                mid = ACTIVE[m.from_user.id][1]
                a = m.from_user.id
                b = ACTIVE[m.from_user.id][0]
                await end_current_chat(a)
                _cleanup_match(mid, a, b)
                await m.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=main_menu())
                await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=main_menu())
            return

        if t == "!next":
            if m.from_user.id in ACTIVE:
                mid = ACTIVE[m.from_user.id][1]
                a = m.from_user.id
                b = ACTIVE[m.from_user.id][0]

                # –∑–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–∞/–ø–æ–∏—Å–∫–∞
                if not await has_required_prefs(a):
                    await end_current_chat(a)
                    _cleanup_match(mid, a, b)
                    await m.answer(
                        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.",
                        reply_markup=gender_self_kb()
                    )
                    await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=main_menu())
                    return

                await record_separation(a, b)
                await end_current_chat(a)
                _cleanup_match(mid, a, b)
                me = await get_user(a)
                await enqueue(a, me[1], me[2])
                await m.answer("–ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
                await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à—ë–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
                                       reply_markup=main_menu())
                await try_match_now(a)
            return

        if t == "!reveal":
            await handle_reveal(m.from_user.id, peer)
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    if m.text:
        await bot.send_message(peer, m.text)
    elif m.photo:
        await bot.send_photo(peer, m.photo[-1].file_id, caption=m.caption or "")
    elif m.sticker:
        await bot.send_sticker(peer, m.sticker.file_id)
    elif m.animation:
        await bot.send_animation(peer, m.animation.file_id, caption=m.caption or "")
    elif m.video:
        await bot.send_video(peer, m.video.file_id, caption=m.caption or "")
    elif m.audio:
        await bot.send_audio(peer, m.audio.file_id, caption=m.caption or "")
    elif m.voice:
        await bot.send_voice(peer, m.voice.file_id, caption=m.caption or "")
    elif m.video_note:
        await bot.send_video_note(peer, m.video_note.file_id)
    elif m.document:
        await bot.send_document(peer, m.document.file_id, caption=m.caption or "")

# ================== –†–∞—Å–∫—Ä—ã—Ç–∏–µ ==================
async def handle_reveal(me_id: int, peer_id: int):
    me = await get_user(me_id)
    peer = await get_user(peer_id)
    if not (me and peer and me[3] == 1 and peer[3] == 1):
        await bot.send_message(me_id, "–†–∞—Å–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: —É –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞.")
        return

    async with db() as conn:
        cur = await conn.execute(
            "SELECT id,a_id,b_id,a_reveal,b_reveal FROM matches WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (me_id, me_id)
        )
        row = await cur.fetchone()
        if not row:
            await bot.send_message(me_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
            return
        mid, a, b, ar, br = row
        is_a = (me_id == a)

        if (is_a and ar == 1) or ((not is_a) and br == 1):
            await bot.send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
            return

        if is_a:
            await conn.execute("UPDATE matches SET a_reveal=1 WHERE id=?", (mid,))
        else:
            await conn.execute("UPDATE matches SET b_reveal=1 WHERE id=?", (mid,))
        await conn.commit()

        cur = await conn.execute("SELECT a_reveal,b_reveal FROM matches WHERE id=?", (mid,))
        ar, br = await cur.fetchone()

    if ar == 1 and br == 1:
        await send_reveal_card(a, peer_id)
        await send_reveal_card(b, me_id)
        await bot.send_message(a, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await bot.send_message(b, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await bot.send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

async def send_reveal_card(to_id: int, whose_id: int):
    u = await get_user(whose_id)
    txt = (
        "<b>–†–∞—Å–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏</b>\n\n"
        f"–ò–º—è: {u[4] or '-'} {u[5] or ''}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {u[6] or '-'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {u[7] or '-'}\n"
        f"–û —Å–µ–±–µ: {u[8] or '-'}\n"
        f"Telegram: {u[9] or '-'}"
    )
    photos = [p for p in (u[10], u[11], u[12]) if p]
    if photos:
        for p in photos[:-1]:
            await bot.send_photo(to_id, p)
        await bot.send_photo(to_id, photos[-1], caption=txt)
    else:
        await bot.send_message(to_id, txt)

# ================== Entry ==================
async def main():
    await init_db()
    print("DB path:", DB_PATH)
    # —Å–Ω—è—Ç—å read-only –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
    try:
        import stat
        if os.path.exists(DB_PATH):
            os.chmod(DB_PATH, stat.S_IWRITE | stat.S_IREAD)
    except Exception:
        pass

    print("Bot started")
    global RESOLVED_CHANNEL_ID
    try:
        chat = await bot.get_chat(CHANNEL_USERNAME)
        RESOLVED_CHANNEL_ID = chat.id  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
        print("Channel resolved id:", RESOLVED_CHANNEL_ID)
    except Exception as e:
        print("Could not resolve channel id:", repr(e))
        RESOLVED_CHANNEL_ID = None  # –æ—Å—Ç–∞–≤–∏–º None ‚Äì –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º

    await setup_extra_features(dp, bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())