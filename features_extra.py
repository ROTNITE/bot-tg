# features_extra.py
import os
import time
import asyncio
from typing import Optional, List, Tuple

import aiosqlite
from aiogram import Dispatcher, Bot, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

# ================== CONFIG & DB PATH ==================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = set(int(x) for x in (os.getenv("ADMIN_IDS", "") or "").split(",") if x.strip())
DAILY_BONUS_POINTS = int(os.getenv("DAILY_BONUS_POINTS", "10") or 10)

# –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
APPDATA_DIR = os.path.join(os.path.expanduser("~"), "AppData", "Local", "mephi_dating")
os.makedirs(APPDATA_DIR, exist_ok=True)
DB_PATH = os.path.join(APPDATA_DIR, "bot.db")

# —Ä–µ—Ñ–µ—Ä–∞–ª-–±–æ–Ω—É—Å—ã (–º–æ–∂–Ω–æ –ø—Ä–∞–≤–∏—Ç—å –ø–æ –≤–∫—É—Å—É)
REFERRAL_BONUS_INVITER = 20
REFERRAL_BONUS_INVITED = 5

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–í–´ ==================
def extra_main_menu() -> ReplyKeyboardMarkup:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏, –ø–ª—é—Å –ú–∞–≥–∞–∑–∏–Ω/Support/–†–µ—Ñ–µ—Ä–∞–ª–∫–∞.
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∞–ª–∏–∞—Å–Ω—É—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ:
        from features_extra import extra_main_menu as main_menu
    """
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üß≠ –†–µ–∂–∏–º—ã"))
    kb.add(KeyboardButton(text="üë§ –ê–Ω–∫–µ—Ç–∞"))
    kb.add(KeyboardButton(text="üí∞ –ú–∞–≥–∞–∑–∏–Ω"))
    kb.add(KeyboardButton(text="üÜò Support"))
    kb.add(KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"))
    return kb.as_markup(resize_keyboard=True)

def shop_back_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    kb.add(KeyboardButton(text="üí∞ –ú–∞–≥–∞–∑–∏–Ω"))
    return kb.as_markup(resize_keyboard=True)

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def _now() -> int:
    return int(time.time())

def db():
    return aiosqlite.connect(DB_PATH)

async def get_role(tg_id:int)->str:
    async with db() as conn:
        cur = await conn.execute("SELECT role FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return (row[0] if row and row[0] else "user")

async def add_points(tg_id:int, delta:int):
    async with db() as conn:
        await conn.execute("UPDATE users SET points = COALESCE(points,0) + ? WHERE tg_id=?", (delta, tg_id))
        await conn.commit()

async def get_points(tg_id:int)->int:
    async with db() as conn:
        cur = await conn.execute("SELECT COALESCE(points,0) FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return int(row[0] if row else 0)

async def set_status(tg_id:int, title:Optional[str]):
    async with db() as conn:
        await conn.execute("UPDATE users SET status_title=? WHERE tg_id=?", (title, tg_id))
        await conn.commit()

async def ensure_user(tg_id:int):
    async with db() as conn:
        await conn.execute("INSERT OR IGNORE INTO users(tg_id) VALUES(?)", (tg_id,))
        if tg_id in ADMIN_IDS:
            await conn.execute("UPDATE users SET role='admin' WHERE tg_id=?", (tg_id,))
        await conn.commit()

# ================== –õ–û–ö–ê–õ–¨–ù–ê–Ø –°–•–ï–ú–ê –≠–ö–°–¢–†–ê-–§–ò–ß ==================
EXTRA_SQL = """
-- –†–µ—Ñ–µ—Ä–∞–ª–∫–∏
CREATE TABLE IF NOT EXISTS referrals(
  invited_id INTEGER PRIMARY KEY,
  inviter_id INTEGER NOT NULL,
  ts INTEGER DEFAULT (strftime('%s','now')),
  rewarded INTEGER DEFAULT 0
);

-- –õ–µ–Ω–∏–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π –ø–æ–∫—É–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
CREATE UNIQUE INDEX IF NOT EXISTS idx_purchases_unique
ON purchases(user_id, item_id);

-- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
CREATE TABLE IF NOT EXISTS daily_bonus(
  uid INTEGER PRIMARY KEY,
  last_claim_day INTEGER  -- —Ñ–æ—Ä–º–∞—Ç YYYYMMDD
);
"""

async def init_extra_schema():
    async with db() as conn:
        await conn.executescript(EXTRA_SQL)
        await conn.commit()

# ================== –ú–ê–ì–ê–ó–ò–ù ==================
async def list_active_items() -> List[Tuple[int, str, int, str, Optional[str]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (id, name, price, type, payload)
    """
    async with db() as conn:
        cur = await conn.execute(
            "SELECT id,name,price,type,payload FROM shop_items WHERE is_active=1 ORDER BY id ASC"
        )
        rows = await cur.fetchall()
        return rows or []

def build_shop_markup(items: List[Tuple[int, str, int, str, Optional[str]]]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for it in items:
        it_id, name, price, it_type, payload = it
        kb.button(text=f"–ö—É–ø–∏—Ç—å ‚Äî {name} ({price})", callback_data=f"shop_buy:{it_id}")
    if not items:
        kb.button(text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ", callback_data="noop")
    kb.adjust(1)
    return kb.as_markup()

async def apply_item_effect(user_id:int, item_id:int):
    async with db() as conn:
        cur = await conn.execute("SELECT type,payload FROM shop_items WHERE id=?", (item_id,))
        row = await cur.fetchone()
    if not row:
        return
    it_type, payload = row
    if it_type == "status":
        await set_status(user_id, payload or "‚ú® –ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    # it_type == "privilege": —Ç—É—Ç –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ñ–ª–∞–≥–∏/–ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è

async def handle_purchase(user_id:int, item_id:int) -> str:
    # –¥–æ—Å—Ç–∞–Ω–µ–º —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
    async with db() as conn:
        cur = await conn.execute("SELECT name,price FROM shop_items WHERE id=? AND is_active=1", (item_id,))
        row = await cur.fetchone()
    if not row:
        return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω."
    name, price = row
    bal = await get_points(user_id)
    if bal < price:
        return f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤. –ù—É–∂–Ω–æ {price}, —É —Ç–µ–±—è {bal}."

    # —Å–ø–∏—Å–∞–Ω–∏–µ + –∑–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏
    async with db() as conn:
        await conn.execute("UPDATE users SET points=COALESCE(points,0)-? WHERE tg_id=?", (price, user_id))
        await conn.execute("INSERT INTO purchases(user_id,item_id) VALUES(?,?)", (user_id, item_id))
        await conn.commit()

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    await apply_item_effect(user_id, item_id)
    return f"‚úÖ –ü–æ–∫—É–ø–∫–∞ ¬´{name}¬ª —É—Å–ø–µ—à–Ω–∞!"

# ================== –°–ê–ü–ü–û–†–¢ ==================
class Support(StatesGroup):
    waiting_text = State()

def support_entry_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)

async def save_support_msg(from_user: int, text: str, orig_msg_id: Optional[int]) -> int:
    async with db() as conn:
        cur = await conn.execute(
            "INSERT INTO support_msgs(from_user, orig_msg_id, text) VALUES(?,?,?)",
            (from_user, orig_msg_id or 0, text)
        )
        mid = cur.lastrowid
        await conn.commit()
        return int(mid)

# ================== –†–ï–§–ï–†–ê–õ–ö–ò ==================
async def register_referral_if_needed(invited_id:int, maybe_payload:str) -> Optional[int]:
    """
    –û–∂–∏–¥–∞–µ—Ç—Å—è payload –≤–∏–¥–∞ 'ref12345'. –ï—Å–ª–∏ –æ–∫ ‚Äî –≤—Å—Ç–∞–≤–∏–º –∑–∞–ø–∏—Å—å –∏ –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inviter_id (–∏–ª–∏ None).
    """
    payload = (maybe_payload or "").strip()
    if not payload.startswith("ref"):
        return None
    try:
        inviter_id = int(payload[3:])
    except Exception:
        return None
    if inviter_id == invited_id:
        return None

    # —É–∂–µ –±—ã–ª?
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM referrals WHERE invited_id=?", (invited_id,))
        if await cur.fetchone():
            return inviter_id

        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        await conn.execute(
            "INSERT OR IGNORE INTO referrals(invited_id,inviter_id) VALUES(?,?)",
            (invited_id, inviter_id)
        )
        await conn.commit()

    # –ë–æ–Ω—É—Å—ã: –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É —á—É—Ç—å, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –±–æ–ª—å—à–µ
    await add_points(inviter_id, REFERRAL_BONUS_INVITER)
    await add_points(invited_id, REFERRAL_BONUS_INVITED)
    return inviter_id

async def get_ref_stats(user_id:int) -> Tuple[int, int]:
    """
    count, total_bonus_approx
    """
    async with db() as conn:
        cur = await conn.execute("SELECT COUNT(*) FROM referrals WHERE inviter_id=?", (user_id,))
        cnt = (await cur.fetchone() or [0])[0]
    return int(cnt or 0), int((cnt or 0) * REFERRAL_BONUS_INVITER)

# ================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ==================
def _build_shop_text(items) -> str:
    if not items:
        return "üõç –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ!"
    lines = ["üõç <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n"]
    for it_id, name, price, it_type, payload in items:
        t_emoji = "üè∑" if it_type == "status" else "üéõ"
        lines.append(f"{t_emoji} <b>{name}</b> ‚Äî {price} –æ—á–∫–æ–≤")
    lines.append("\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å ‚Ä¶¬ª, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.")
    return "\n".join(lines)

async def setup_extra_features(dp: Dispatcher, bot: Bot):
    await init_extra_schema()

    # === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ===
    @dp.message(F.text == "üí∞ –ú–∞–≥–∞–∑–∏–Ω")
    async def shop_open(m: Message):
        await ensure_user(m.from_user.id)
        items = await list_active_items()
        await m.answer(
            _build_shop_text(items),
            reply_markup=shop_back_kb()
        )
        await m.answer(
            "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
            reply_markup=build_shop_markup(items)
        )

    @dp.callback_query(F.data.startswith("shop_buy:"))
    async def shop_buy_cb(c: CallbackQuery):
        try:
            item_id = int(c.data.split(":")[1])
        except Exception:
            await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.", show_alert=True)
            return
        msg = await handle_purchase(c.from_user.id, item_id)
        bal = await get_points(c.from_user.id)
        await c.message.answer(f"{msg}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bal}", reply_markup=shop_back_kb())
        await c.answer("–ì–æ—Ç–æ–≤–æ")

    # === –°–ê–ü–ü–û–†–¢ ===
    @dp.message(F.text == "üÜò Support")
    async def support_entry(m: Message, state: FSMContext):
        await ensure_user(m.from_user.id)
        await m.answer("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø–µ—Ä–µ—à–ª—é –∞–¥–º–∏–Ω–∞–º.",
                       reply_markup=support_entry_kb())
        await state.set_state(Support.waiting_text)

    @dp.message(Support.waiting_text, F.text)
    async def support_collect(m: Message, state: FSMContext):
        mid = await save_support_msg(m.from_user.id, m.text, m.message_id)
        # –ø–µ—Ä–µ—à–ª—ë–º –∞–¥–º–∏–Ω–∞–º
        admins = ADMIN_IDS or set()
        for aid in admins:
            try:
                await bot.send_message(
                    aid,
                    f"üÜò <b>–°–∞–ø–ø–æ—Ä—Ç</b>\nfrom: <code>{m.from_user.id}</code>\nmsg_id: <code>{mid}</code>\n\n{text_escape(m.text)}",
                    parse_mode=ParseMode.HTML
                )
            except Exception:
                pass
        await m.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                       reply_markup=extra_main_menu())
        await state.clear()

    # –∞–¥–º–∏–Ω-–æ—Ç–≤–µ—Ç: /answer <user_id> <—Ç–µ–∫—Å—Ç>
    @dp.message(Command("answer"))
    async def admin_answer(m: Message):
        if m.from_user.id not in ADMIN_IDS:
            return
        parts = (m.text or "").split(maxsplit=2)
        if len(parts) < 3:
            await m.answer("–§–æ—Ä–º–∞—Ç: /answer <user_id> <—Ç–µ–∫—Å—Ç>")
            return
        try:
            target = int(parts[1])
        except Exception:
            await m.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        text = parts[2].strip()
        if not text:
            await m.answer("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
            return
        try:
            await bot.send_message(target, f"üì© –û—Ç–≤–µ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞:\n{text}")
            await m.answer("–û—Ç–ø—Ä–∞–≤–∏–ª.")
        except Exception as e:
            await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e!r}")

    # === –†–ï–§–ï–†–ê–õ–ö–ê ===
    @dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    async def referral_entry(m: Message):
        await ensure_user(m.from_user.id)
        me = await bot.get_me()
        bot_username = me.username
        link = f"https://t.me/{bot_username}?start=ref{m.from_user.id}"
        cnt, bonus = await get_ref_stats(m.from_user.id)
        bal = await get_points(m.from_user.id)
        txt = (
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n<code>{link}</code>\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{cnt}</b>\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É: <b>{bonus}</b> –æ—á–∫–æ–≤\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> –æ—á–∫–æ–≤\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +{REFERRAL_BONUS_INVITER} —Ç–µ–±–µ, +{REFERRAL_BONUS_INVITED} –¥—Ä—É–≥—É."
        )
        await m.answer(txt, parse_mode=ParseMode.HTML, reply_markup=extra_main_menu())

    # –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç–∞—Ä—Ç-–ø–µ–π–ª–æ–∞–¥–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —É–∂–µ –∏–º–µ—é—â–µ–º—É—Å—è /start)
    @dp.message(Command("start"))
    async def referral_hook_on_start(m: Message):
        await ensure_user(m.from_user.id)
        # payload –ø–æ—Å–ª–µ "/start "
        payload = ""
        if m.text:
            parts = m.text.split(maxsplit=1)
            if len(parts) == 2:
                payload = parts[1]
        inviter = await register_referral_if_needed(m.from_user.id, payload)
        if inviter:
            try:
                await m.answer("–¢—ã –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã! üéâ",
                               reply_markup=extra_main_menu())
            except Exception:
                pass  # –±–µ–∑ –ø–∞–Ω–∏–∫–∏, /start –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç

    # === –ê–î–ú–ò–ù: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ ===
    # /add_item <name> | <price:int> | <type:status|privilege> | <payload>
    @dp.message(Command("add_item"))
    async def admin_add_item(m: Message):
        if m.from_user.id not in ADMIN_IDS:
            return
        raw = (m.text or "").replace("/add_item", "", 1).strip()
        parts = [p.strip() for p in raw.split("|")]
        if len(parts) < 4:
            await m.answer("–§–æ—Ä–º–∞—Ç: /add_item –ù–∞–∑–≤–∞–Ω–∏–µ | 100 | status|privilege | payload")
            return
        name, price_s, it_type, payload = parts[0], parts[1], parts[2], parts[3]
        if it_type not in ("status", "privilege"):
            await m.answer("type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å status –∏–ª–∏ privilege")
            return
        try:
            price = int(price_s)
        except Exception:
            await m.answer("price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        async with db() as conn:
            await conn.execute(
                "INSERT INTO shop_items(name,price,type,payload,is_active) VALUES(?,?,?,?,1)",
                (name, price, it_type, payload)
            )
            await conn.commit()
        await m.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")

    @dp.message(Command("toggle_item"))
    async def admin_toggle_item(m: Message):
        if m.from_user.id not in ADMIN_IDS:
            return
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) < 2:
            await m.answer("–§–æ—Ä–º–∞—Ç: /toggle_item <item_id>")
            return
        try:
            item_id = int(parts[1])
        except Exception:
            await m.answer("item_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        async with db() as conn:
            await conn.execute(
                "UPDATE shop_items SET is_active = CASE is_active WHEN 1 THEN 0 ELSE 1 END WHERE id=?",
                (item_id,)
            )
            await conn.commit()
        await m.answer("–ì–æ—Ç–æ–≤–æ, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")

    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
    @dp.message(Command("balance"))
    async def cmd_balance(m: Message):
        await ensure_user(m.from_user.id)
        bal = await get_points(m.from_user.id)
        async with db() as conn:
            cur = await conn.execute("SELECT status_title FROM users WHERE tg_id=?", (m.from_user.id,))
            row = await cur.fetchone()
            status = row[0] if row and row[0] else "‚Äî"
        await m.answer(f"üî¢ –ë–∞–ª–∞–Ω—Å: {bal}\nüëë –°—Ç–∞—Ç—É—Å: {status}", reply_markup=extra_main_menu())

    # –ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–∞—à–µ –º–µ–Ω—é
    @dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    async def back_to_menu(m: Message, state: FSMContext):
        await state.clear()
        await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=extra_main_menu())

# ================== –£–¢–ò–õ–´ ==================
def text_escape(s: str) -> str:
    if not s:
        return s
    return (s
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;"))
