import asyncio
import os
import time
from math import ceil
from typing import Optional, Dict, Tuple
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import secrets, string

import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
try:
    # aiogram v3
    from aiogram.dispatcher.event.bases import SkipHandler
except Exception:
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É —Ç–µ–±—è v2
    from aiogram.exceptions import SkipHandler  # type: ignore
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv
# === Anonymizer: –º–∞—Å–∫–∏—Ä—É–µ–º @user, t.me, tg://user?id=..., –ø–æ—á—Ç—É –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
import re

USER_RE = re.compile(r'(?<!\w)@[\w_]{3,}', re.I)                 # @username
TME_RE  = re.compile(r'(?:https?://)?t\.me/[^\s]+', re.I)        # t.me/...
TGID_RE = re.compile(r'tg://user\?id=\d+', re.I)                 # tg://user?id=...
MAIL_RE = re.compile(r'[\w\.-]+@[\w\.-]+\.\w+', re.I)            # email
PHON_RE = re.compile(r'(?<!\d)(?:\+?\d[\d\-\s()]{8,}\d)')        # —Ç–µ–ª–µ—Ñ–æ–Ω

def sanitize_text(s: str) -> str:
    s = TGID_RE.sub('[hidden]', s)
    s = TME_RE.sub('[link hidden]', s)
    s = USER_RE.sub('@hidden', s)
    s = MAIL_RE.sub('[email hidden]', s)
    s = PHON_RE.sub('[phone hidden]', s)
    return s

async def send_text_anonym(peer: int, text: str):
    # –æ—Ç–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É, –ø—Ä–µ–≤—å—é –∏ –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    await bot.send_message(
        peer,
        sanitize_text(text),
        parse_mode=None,
        disable_web_page_preview=True,
        protect_content=True
    )

def clean_cap(caption: Optional[str]) -> Optional[str]:
    return sanitize_text(caption) if caption else None

# ============================================================
#                         CONFIG
# ============================================================

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ê–¥–º–∏–Ω—ã (—Å–ø–∏—Å–æ–∫ id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ .env)
ADMIN_IDS = set(int(x) for x in (os.getenv("ADMIN_IDS", "") or "").split(",") if x.strip())

SUPPORT_ENABLED = True
DAILY_BONUS_POINTS = 10
REF_BONUS_POINTS = 20                     # –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
INACTIVITY_SECONDS = 180                  # –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–ª—á–∞–Ω–∏–∏
CHANNEL_USERNAME = "@nektomephi"          # —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/nektomephi"  # —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
RESOLVED_CHANNEL_ID: Optional[int] = None # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ main()

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

APPDATA_DIR = os.path.join(os.path.expanduser("~"), "AppData", "Local", "mephi_dating")
os.makedirs(APPDATA_DIR, exist_ok=True)
DB_PATH = os.path.join(APPDATA_DIR, "bot.db")

BLOCK_TXT = "–°–µ–π—á–∞—Å –∏–¥—ë—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã: !stop, !next, !reveal."

INTRO_TEXT = (
    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: t.me/nektomephi\n\n"
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ò–§–ò</b>.\n\n"
    "!!! –í –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï !!!\n"
    "–ë–æ—Ç <b>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</b> ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, "
    "—Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
    "–≠—Ç–æ –≥–∏–±—Ä–∏–¥ –¥–∞–π–≤–∏–Ω—á–∏–∫–∞ –∏ nekto.me: —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º —Å–æ–≥–ª–∞—Å–∏–∏ "
    "–º–æ–∂–Ω–æ <b>—Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏</b> —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <code>!reveal</code> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã).\n\n"
    "üí° –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>.\n"
    "üìá –†–µ–∂–∏–º <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
    "‚öôÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
    "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.\n"
    "2Ô∏è‚É£ –ü–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª –∏ –Ω–∞—á–Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–∏–∞–ª–æ–≥.\n\n"
    "üí¨ –í–æ –≤—Ä–µ–º—è —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
    "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
    "<code>!stop</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
    "<code>!reveal</code> ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ\n\n"
    "‚ö†Ô∏è –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –º–æ–ª—á–∏—Ç –±–æ–ª–µ–µ 180 —Å–µ–∫—É–Ω–¥, –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É –æ–±–æ–∏—Ö."
)

FACULTIES = [
    "–ò–ò–ö–°", "–§–ë–ò–£–ö–°", "–ò–ú–û", "–ò–§–¢–ò–°",
    "–ò–ù–¢–≠–õ", "–ò–§–¢–≠–ë", "–ò–§–ò–ë", "–õ–ê–ü–õ–ê–ó",
    "–ò–Ø–§–ò–¢"
]

# ============================================================
#                      DATABASE & MIGRATIONS
# ============================================================

CREATE_SQL = """
CREATE TABLE IF NOT EXISTS recent_partners(
  u_id INTEGER NOT NULL,
  partner_id INTEGER NOT NULL,
  block_left INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY(u_id, partner_id)
);

PRAGMA journal_mode=WAL;

CREATE TABLE IF NOT EXISTS users(
  tg_id INTEGER PRIMARY KEY,
  gender TEXT,
  seeking TEXT,
  reveal_ready INTEGER DEFAULT 0,
  first_name TEXT,
  last_name TEXT,
  faculty TEXT,
  age INTEGER,
  about TEXT,
  username TEXT,
  photo1 TEXT,
  photo2 TEXT,
  photo3 TEXT,
  created_at INTEGER DEFAULT (strftime('%s','now')),
  updated_at INTEGER DEFAULT (strftime('%s','now'))
);

CREATE TABLE IF NOT EXISTS shop_items(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  price INTEGER NOT NULL,
  type TEXT NOT NULL,
  payload TEXT,
  is_active INTEGER DEFAULT 1
);

CREATE TABLE IF NOT EXISTS ratings(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  match_id INTEGER NOT NULL,
  from_user INTEGER NOT NULL,
  to_user INTEGER NOT NULL,
  stars INTEGER NOT NULL CHECK(stars BETWEEN 1 AND 5),
  ts INTEGER DEFAULT (strftime('%s','now')),
  UNIQUE(match_id, from_user)
);

CREATE INDEX IF NOT EXISTS idx_ratings_to ON ratings(to_user);

CREATE TABLE IF NOT EXISTS complaints(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  match_id INTEGER NOT NULL,
  from_user INTEGER NOT NULL,
  about_user INTEGER NOT NULL,
  text TEXT,
  ts INTEGER DEFAULT (strftime('%s','now')),
  status TEXT DEFAULT 'open'
);

CREATE TABLE IF NOT EXISTS purchases(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  item_id INTEGER NOT NULL,
  ts INTEGER DEFAULT (strftime('%s','now'))
);

CREATE TABLE IF NOT EXISTS user_statuses(
  user_id INTEGER NOT NULL,
  title TEXT NOT NULL,
  PRIMARY KEY(user_id, title)
);

CREATE TABLE IF NOT EXISTS support_msgs(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  from_user INTEGER NOT NULL,
  to_admin INTEGER,
  orig_msg_id INTEGER,
  text TEXT,
  ts INTEGER DEFAULT (strftime('%s','now')),
  status TEXT DEFAULT 'open'
);

CREATE TRIGGER IF NOT EXISTS users_updated
AFTER UPDATE ON users
BEGIN
  UPDATE users SET updated_at=strftime('%s','now') WHERE tg_id=NEW.tg_id;
END;

CREATE TABLE IF NOT EXISTS queue(
  tg_id INTEGER PRIMARY KEY,
  gender TEXT,
  seeking TEXT,
  ts INTEGER
);

CREATE TABLE IF NOT EXISTS matches(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  a_id INTEGER,
  b_id INTEGER,
  active INTEGER DEFAULT 1,
  a_reveal INTEGER DEFAULT 0,
  b_reveal INTEGER DEFAULT 0,
  started_at INTEGER DEFAULT (strftime('%s','now'))
);

CREATE TABLE IF NOT EXISTS referrals(
  inviter INTEGER NOT NULL,
  invited INTEGER PRIMARY KEY,
  ts INTEGER DEFAULT (strftime('%s','now'))
);

CREATE TABLE IF NOT EXISTS settings(
  key TEXT PRIMARY KEY,
  value TEXT
);

CREATE INDEX IF NOT EXISTS idx_matches_active ON matches(active);
"""

ALTERS = [
    ("users", "role",         "ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user'"),
    ("users", "points",       "ALTER TABLE users ADD COLUMN points INTEGER DEFAULT 0"),
    ("users", "status_title", "ALTER TABLE users ADD COLUMN status_title TEXT"),
    ("users", "last_daily",   "ALTER TABLE users ADD COLUMN last_daily INTEGER DEFAULT 0")
]

def db():
    return aiosqlite.connect(DB_PATH)

async def init_db():
    async with db() as conn:
        await conn.executescript(CREATE_SQL)

        # –º—è–≥–∫–∏–µ ALTER'—ã
        for table, col, sql in ALTERS:
            cur = await conn.execute(f"PRAGMA table_info({table})")
            cols = [r[1] for r in await cur.fetchall()]
            if col not in cols:
                try:
                    await conn.execute(sql)
                except Exception:
                    pass

        # –º–∏–≥—Ä–∞—Ü–∏—è referrals (–¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏)
        cur = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='referrals'")
        has_ref = await cur.fetchone()
        if has_ref:
            cur = await conn.execute("PRAGMA table_info(referrals)")
            cols = {r[1] for r in await cur.fetchall()}
            if "inviter" not in cols:
                await conn.execute("ALTER TABLE referrals ADD COLUMN inviter INTEGER")
            if "ts" not in cols:
                await conn.execute("ALTER TABLE referrals ADD COLUMN ts INTEGER DEFAULT (strftime('%s','now'))")
            else:
                await conn.execute("""
                        CREATE TABLE IF NOT EXISTS referrals(
                          inviter INTEGER,
                          invited INTEGER PRIMARY KEY,
                          ts INTEGER DEFAULT (strftime('%s','now'))
                        )
                    """)

            # --- NEW: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö —Ä–µ—Ñ-–∫–æ–¥–æ–≤ ---
            await conn.execute("""
                    CREATE TABLE IF NOT EXISTS ref_codes(
                      code TEXT PRIMARY KEY,
                      inviter INTEGER NOT NULL
                    )
                """)

            await conn.commit()


# ============================================================
#                         FSM STATES
# ============================================================

class ComplaintState(StatesGroup):
    wait_text = State()   # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã; –≤ state: mid, about_id

class GState(StatesGroup):
    pick_gender = State()
    pick_seeking = State()

class RevealForm(StatesGroup):
    name = State()
    faculty = State()
    age = State()
    about = State()
    photos = State()

class AdminGrantPoints(StatesGroup):
    wait_user_id = State()
    wait_amount = State()

class SupportState(StatesGroup):
    waiting = State()

class AdminAddItem(StatesGroup):
    wait_name = State()
    wait_price = State()
    wait_type = State()
    wait_payload = State()

class AdminShopDel(StatesGroup):
    wait_id = State()

class AdminSettings(StatesGroup):
    wait_value = State()   # –∂–¥—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞

class AdminAdmins(StatesGroup):
    mode = State()         # 'add' –∏–ª–∏ 'del'
    wait_user_id = State()

class AdminBroadcast(StatesGroup):
    wait_text = State()

class AdminSupportReply(StatesGroup):
    wait_text = State()    # –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ uid (—Ö—Ä–∞–Ω–∏–º –≤ state.data['uid'])

# ============================================================
#                 RUNTIME (RAM) STRUCTURES & UTILS
# ============================================================

# ------------------ Runtime settings cache ------------------
SETTINGS: Dict[str, str] = {}  # key -> value (str)

DEFAULT_SETTINGS = {
    "inactivity_seconds": "180",   # ‚è±Ô∏è —Ç–∞–π–º-–∞—É—Ç –º–æ–ª—á–∞–Ω–∏—è
    "ref_bonus_points":   "20",    # üéØ —Ä–µ—Ñ-–±–æ–Ω—É—Å
    "daily_bonus_points": "10",    # üéÅ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
    "block_rounds":       "2",     # üîÅ —Å–∫–æ–ª—å–∫–æ ¬´—Ä–∞—É–Ω–¥–æ–≤¬ª –Ω–µ –º–∞—Ç—á–∏—Ç—å —Ç—É –∂–µ –ø–∞—Ä—É
    "support_enabled":    "1",     # üÜò –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–∞–ø–ø–æ—Ä—Ç (1/0)
}

async def load_settings_cache():
    SETTINGS.clear()
    async with db() as conn:
        cur = await conn.execute("SELECT key, value FROM settings")
        for k, v in await cur.fetchall():
            SETTINGS[k] = str(v)
    # –ø—Ä–æ—Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç
    async with db() as conn:
        for k, v in DEFAULT_SETTINGS.items():
            if k not in SETTINGS:
                await conn.execute("INSERT OR REPLACE INTO settings(key,value) VALUES(?,?)", (k, v))
                SETTINGS[k] = v
        await conn.commit()

async def safe_edit_message(msg: Message, *, text: Optional[str] = None, reply_markup=None):
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ò–≥–Ω–æ—Ä–∏—Ç 'message is not modified'.
    """
    try:
        current_text = msg.text or ""
        if text is not None and text != current_text:
            await msg.edit_text(text, reply_markup=reply_markup)
        elif reply_markup is not None:
            await msg.edit_reply_markup(reply_markup=reply_markup)
        # –∏–Ω–∞—á–µ ‚Äî –º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ
    except TelegramBadRequest as e:
        # –¢–µ–ª–µ–≥—Ä–∞–º —Ä—É–≥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏—Ç—å —Ç–µ–º –∂–µ —Å–∞–º—ã–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if "message is not modified" in str(e):
            return
        raise

async def set_setting(key: str, value: str):
    async with db() as conn:
        await conn.execute("INSERT OR REPLACE INTO settings(key,value) VALUES(?,?)", (key, str(value)))
        await conn.commit()
    SETTINGS[key] = str(value)

def g_inactivity() -> int:
    return int(SETTINGS.get("inactivity_seconds", DEFAULT_SETTINGS["inactivity_seconds"]))

def g_ref_bonus() -> int:
    return int(SETTINGS.get("ref_bonus_points", DEFAULT_SETTINGS["ref_bonus_points"]))

def g_daily_bonus() -> int:
    return int(SETTINGS.get("daily_bonus_points", DEFAULT_SETTINGS["daily_bonus_points"]))

def g_block_rounds() -> int:
    return int(SETTINGS.get("block_rounds", DEFAULT_SETTINGS["block_rounds"]))

def g_support_enabled() -> bool:
    return SETTINGS.get("support_enabled", DEFAULT_SETTINGS["support_enabled"]) == "1"

def intro_text() -> str:
    t = int(SETTINGS.get("inactivity_seconds", "180"))
    return (
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: t.me/nektomephi\n\n"
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ò–§–ò</b>.\n\n"
        "!!! –í –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –†–ê–ë–û–¢–ê–ï–¢ –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï !!!\n"
        "–ë–æ—Ç <b>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</b> ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, "
        "—Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "–≠—Ç–æ –≥–∏–±—Ä–∏–¥ –¥–∞–π–≤–∏–Ω—á–∏–∫–∞ –∏ nekto.me: —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ, –∞ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º —Å–æ–≥–ª–∞—Å–∏–∏ "
        "–º–æ–∂–Ω–æ <b>—Ä–∞—Å–∫—Ä—ã—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏</b> —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É <code>!reveal</code> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã).\n\n"
        "üí° –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>.\n"
        "üìá –†–µ–∂–∏–º <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "‚öôÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.\n"
        "2Ô∏è‚É£ –ü–æ –∂–µ–ª–∞–Ω–∏—é –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –æ–Ω–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª –∏ –Ω–∞—á–Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–∏–∞–ª–æ–≥.\n\n"
        "üí¨ –í–æ –≤—Ä–µ–º—è —á–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "<code>!stop</code> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "<code>!reveal</code> ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ\n\n"
        f"‚ö†Ô∏è –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –º–æ–ª—á–∏—Ç –±–æ–ª–µ–µ {t} —Å–µ–∫—É–Ω–¥, –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —É –æ–±–æ–∏—Ö."
    )

_nowm = time.monotonic  # –º–æ–Ω–æ—Ç–æ–Ω–∏—á–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã

DEADLINE: Dict[int, float] = {}   # match_id -> monotonic deadline
LAST_SHOWN: Dict[int, int] = {}   # match_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
ACTIVE: Dict[int, Tuple[int, int]] = {}   # user_id -> (peer_id, match_id)
LAST_SEEN: Dict[int, float] = {}          # user_id -> last_seen_unix
WATCH: Dict[int, asyncio.Task] = {}       # match_id -> watcher task
WARNED: Dict[int, bool] = {}              # match_id -> warned for countdown
SUPPORT_RELAY: Dict[int, int] = {}        # msg_id_—É_–±–æ—Ç–∞ -> user_id
COUNTDOWN_TASKS: Dict[int, asyncio.Task] = {}                     # match_id -> task
COUNTDOWN_MSGS: Dict[int, Tuple[Optional[int], Optional[int]]] = {}  # match_id -> (msg_id_a, msg_id_b)

def _now() -> float:
    return time.time()

# ------------------ Generic chat gate ------------------

async def is_chat_active(user_id: int) -> bool:
    if user_id in ACTIVE:
        return True
    async with db() as conn:
        cur = await conn.execute(
            "SELECT 1 FROM matches WHERE active=1 AND (a_id=? OR b_id=?) LIMIT 1",
            (user_id, user_id),
        )
        return (await cur.fetchone()) is not None

async def deny_actions_during_chat(m: Message) -> bool:
    """
    –í–µ—Ä–Ω—ë—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ: –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    if await is_chat_active(m.from_user.id):
        await _materialize_session_if_needed(m.from_user.id)  # –æ–∂–∏–≤–∏–º RAM –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        await m.answer(BLOCK_TXT, reply_markup=ReplyKeyboardRemove())
        return True
    return False

# ============================================================
#                       KEYBOARDS (UI)
# ============================================================

def main_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üß≠ –†–µ–∂–∏–º—ã"))
    kb.add(KeyboardButton(text="üë§ –ê–Ω–∫–µ—Ç–∞"))
    kb.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    kb.add(KeyboardButton(text="‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    kb.add(KeyboardButton(text="üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"))
    return kb.as_markup(resize_keyboard=True)

def modes_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"))
    kb.add(KeyboardButton(text="üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç"))
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb.as_markup(resize_keyboard=True)

def subscription_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚û°Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="sub_check")
    kb.adjust(1)
    return kb.as_markup()

def anon_chat_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb.as_markup(resize_keyboard=True)

def cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)

def rate_or_complain_kb(mid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for i in range(1, 6):
        b.button(text=str(i), callback_data=f"rate:{mid}:{i}")
    b.button(text="üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complain:{mid}")
    b.adjust(5, 1)
    return b.as_markup()

def shop_kb(items) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for (id_, name, price, type_, payload) in items:
        b.button(text=f"{name} ‚Äî {price}üí∞", callback_data=f"shop_buy:{id_}")
    if not items:
        b.button(text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ üòÖ", callback_data="noop")
    b.adjust(1)
    return b.as_markup()

def gender_self_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–Ø –¥–µ–≤—É—à–∫–∞"))
    kb.add(KeyboardButton(text="–Ø –ø–∞—Ä–µ–Ω—å"))
    return kb.as_markup(resize_keyboard=True)

def seeking_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–î–µ–≤—É—à–∫–∏"))
    kb.add(KeyboardButton(text="–ü–∞—Ä–Ω–∏"))
    kb.add(KeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ"))
    return kb.as_markup(resize_keyboard=True)

def faculties_kb() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for i, f in enumerate(FACULTIES):
        b.button(text=f, callback_data=f"fac:{i}")
    b.adjust(2)
    return b.as_markup()

def reveal_entry_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    kb.add(KeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å"))
    return kb.as_markup(resize_keyboard=True)

def about_kb(refill: bool = False, has_prev: bool = False) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    if refill and has_prev:
        kb.add(KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"))
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)

def photos_empty_kb(refill: bool = False, has_prev: bool = False) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    if refill and has_prev:
        kb.add(KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"))
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)

def photos_progress_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–ì–æ—Ç–æ–≤–æ"))
    kb.add(KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ"))
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb.as_markup(resize_keyboard=True)

def statuses_kb(inventory: list[str], current: Optional[str]) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for t in inventory:
        mark = " ‚úÖ" if current and t == current else ""
        b.button(text=f"{t}{mark}", callback_data=f"use_status:{t}")
    if current:
        b.button(text="–°–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="use_status:__none__")
    b.adjust(1)
    return b.as_markup()

def admin_main_kb() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="admin:shop")
    b.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")
    b.button(text="üë• –ê–¥–º–∏–Ω—ã", callback_data="admin:admins")
    b.button(text="üß∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin:support")
    b.button(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")
    b.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    # === NEW: –∫–Ω–æ–ø–∫–∞ –≤—ã–¥–∞—á–∏ –æ—á–∫–æ–≤
    b.button(text="üí≥ –í—ã–¥–∞—Ç—å –æ—á–∫–∏", callback_data="admin:grant")
    b.adjust(2, 2, 2, 1)
    return b.as_markup()

def admin_shop_kb() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin:shop:add")
    b.button(text="üì¶ –°–ø–∏—Å–æ–∫", callback_data="admin:shop:list")
    b.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin:shop:del")
    b.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin:home")
    b.adjust(1)
    return b.as_markup()

def admin_settings_kb() -> InlineKeyboardMarkup:
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞
    b = InlineKeyboardBuilder()
    b.button(text=f"‚è±Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {g_inactivity()} c", callback_data="admin:set:inactivity_seconds")
    b.button(text=f"üîÅ –ë–ª–æ–∫-—Ä–∞—É–Ω–¥–æ–≤: {g_block_rounds()}", callback_data="admin:set:block_rounds")
    b.button(text=f"üéÅ Daily: {g_daily_bonus()}", callback_data="admin:set:daily_bonus_points")
    b.button(text=f"üéØ Referral: {g_ref_bonus()}", callback_data="admin:set:ref_bonus_points")
    b.button(text=f"üÜò Support: {'ON' if g_support_enabled() else 'OFF'}", callback_data="admin:set:support_toggle")
    b.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin:home")
    b.adjust(1)
    return b.as_markup()

def admin_admins_kb() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:admins:add")
    b.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:admins:del")
    b.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin:home")
    b.adjust(1)
    return b.as_markup()

def chat_hint() -> str:
    return ("–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n"
            "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
            "<code>!stop</code> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å\n"
            "<code>!reveal</code> ‚Äî –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –µ—Å—Ç—å —É –æ–±–æ–∏—Ö)\n")

# ============================================================
#                      DB HELPERS & QUERIES
# ============================================================

DEFAULT_FREE_STATUSES = ["–ö–æ—Ç–∏–∫ 12 –∫–∞—Ñ–µ–¥—Ä—ã", "–í–∞–π–±–∫–æ–¥–µ—Ä", "–°—Ç—Ä–∞–Ω–Ω—ã–π —á–µ–ª"]

async def add_status_to_inventory(user_id: int, title: str):
    async with db() as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO user_statuses(user_id, title) VALUES(?,?)",
            (user_id, title)
        )
        await conn.commit()

async def can_take_daily_today(tg_id: int) -> bool:
    """
    –†–∞–∑—Ä–µ—à–∞–µ–º 1 —Ä–∞–∑ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å—É—Ç–∫–∏ –ø–æ UTC.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º date('now') –∏ date(last_daily, 'unixepoch').
    """
    async with db() as conn:
        cur = await conn.execute("SELECT COALESCE(last_daily, 0) FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        last = int(row[0] if row else 0)
        if last == 0:
            return True
        cur = await conn.execute("SELECT date('now') <> date(?, 'unixepoch')", (last,))
        # –≤–µ—Ä–Ω—ë—Ç—Å—è 1 –µ—Å–ª–∏ –¥–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–∑–Ω–∞—á–∏—Ç –µ—â—ë –Ω–µ –±—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
        return bool((await cur.fetchone())[0])

async def mark_daily_taken(tg_id: int):
    await set_user_fields(tg_id, last_daily=int(time.time()))

async def get_avg_rating(user_id: int) -> tuple[Optional[float], int]:
    async with db() as conn:
        cur = await conn.execute("SELECT AVG(stars), COUNT(*) FROM ratings WHERE to_user=?", (user_id,))
        row = await cur.fetchone()
        avg = float(row[0]) if row and row[0] is not None else None
        cnt = int(row[1] or 0)
        return avg, cnt

async def last_match_info(user_id: int) -> Optional[tuple[int, int, int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (match_id, peer_id, active) –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    async with db() as conn:
        cur = await conn.execute("""
            SELECT id,a_id,b_id,active FROM matches
            WHERE a_id=? OR b_id=?
            ORDER BY id DESC LIMIT 1
        """, (user_id, user_id))
        row = await cur.fetchone()
        if not row:
            return None
        mid, a, b, active = int(row[0]), int(row[1]), int(row[2]), int(row[3])
        peer = b if a == user_id else a
        return mid, peer, active

async def send_post_chat_feedback(user_id: int, peer_id: int, mid: int):
    try:
        await bot.send_message(
            user_id,
            "–ö–∞–∫ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫? –ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É (1‚Äì5) –∏–ª–∏ –ø–æ–¥–∞–π –∂–∞–ª–æ–±—É:",
            reply_markup=rate_or_complain_kb(mid)
        )
    except Exception:
        pass

async def get_status_inventory(user_id: int) -> list[str]:
    async with db() as conn:
        cur = await conn.execute(
            "SELECT title FROM user_statuses WHERE user_id=? ORDER BY title ASC",
            (user_id,)
        )
        return [r[0] for r in await cur.fetchall()]

async def ensure_free_statuses(user_id: int):
    inv = await get_status_inventory(user_id)
    missing = [s for s in DEFAULT_FREE_STATUSES if s not in inv]
    if not missing:
        return
    async with db() as conn:
        await conn.executemany(
            "INSERT OR IGNORE INTO user_statuses(user_id, title) VALUES(?,?)",
            [(user_id, s) for s in missing]
        )
        await conn.commit()

async def ensure_user(tg_id: int):
    async with db() as conn:
        await conn.execute("INSERT OR IGNORE INTO users(tg_id) VALUES(?)", (tg_id,))
        if tg_id in ADMIN_IDS:
            await conn.execute("UPDATE users SET role='admin' WHERE tg_id=?", (tg_id,))
        await conn.commit()
    # NEW: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    await ensure_free_statuses(tg_id)

async def set_user_fields(tg_id: int, **kwargs):
    if not kwargs:
        return
    cols = ", ".join([f"{k}=?" for k in kwargs.keys()])
    vals = list(kwargs.values()) + [tg_id]
    async with db() as conn:
        await conn.execute(f"UPDATE users SET {cols} WHERE tg_id=?", vals)
        await conn.commit()

async def get_user(tg_id: int):
    async with db() as conn:
        cur = await conn.execute("""
            SELECT tg_id,gender,seeking,reveal_ready,first_name,last_name,
                   faculty,age,about,username,photo1,photo2,photo3
            FROM users WHERE tg_id=?
        """, (tg_id,))
        return await cur.fetchone()

async def get_user_or_create(tg_id: int):
    u = await get_user(tg_id)
    if not u:
        await ensure_user(tg_id)
        u = await get_user(tg_id)
    return u

async def get_role(tg_id: int) -> str:
    async with db() as conn:
        cur = await conn.execute("SELECT role FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return row[0] if row else "user"

async def add_points(tg_id: int, delta: int):
    async with db() as conn:
        await conn.execute("UPDATE users SET points = COALESCE(points,0) + ? WHERE tg_id=?", (delta, tg_id))
        await conn.commit()

async def get_points(tg_id: int) -> int:
    async with db() as conn:
        cur = await conn.execute("SELECT COALESCE(points,0) FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return int(row[0] if row else 0)

async def list_items():
    async with db() as conn:
        cur = await conn.execute(
            "SELECT id,name,price,type,payload FROM shop_items WHERE is_active=1 ORDER BY price ASC, id ASC"
        )
        return await cur.fetchall()

async def add_item(name: str, price: int, type_: str, payload: str):
    async with db() as conn:
        await conn.execute(
            "INSERT INTO shop_items(name,price,type,payload) VALUES(?,?,?,?)",
            (name, price, type_, payload)
        )
        await conn.commit()

async def del_item(item_id: int):
    async with db() as conn:
        await conn.execute("DELETE FROM shop_items WHERE id=?", (item_id,))
        await conn.commit()

async def get_item(item_id: int):
    async with db() as conn:
        cur = await conn.execute("SELECT id,name,price,type,payload FROM shop_items WHERE id=?", (item_id,))
        return await cur.fetchone()

async def set_status(tg_id: int, title: Optional[str]):
    async with db() as conn:
        await conn.execute("UPDATE users SET status_title=? WHERE tg_id=?", (title, tg_id))
        await conn.commit()

async def get_status(tg_id: int) -> Optional[str]:
    async with db() as conn:
        cur = await conn.execute("SELECT status_title FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return row[0] if row and row[0] else None

async def has_required_prefs(tg_id: int) -> bool:
    u = await get_user(tg_id)
    if not u:
        return False
    gender = (u[1] or "").strip()
    seeking = (u[2] or "").strip()
    return bool(gender and seeking)

async def register_referral(inviter: int, invited: int) -> bool:
    if inviter == invited or inviter is None:
        return False
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM referrals WHERE invited=?", (invited,))
        if await cur.fetchone():
            return False
        await conn.execute("INSERT INTO referrals(inviter, invited) VALUES(?,?)", (inviter, invited))
        await conn.commit()
    return True

async def count_referrals(inviter: int) -> int:
    async with db() as conn:
        await conn.execute(
            "CREATE TABLE IF NOT EXISTS referrals(inviter INTEGER, invited INTEGER PRIMARY KEY, ts INTEGER DEFAULT (strftime('%s','now')))"
        )
        cur = await conn.execute("PRAGMA table_info(referrals)")
        cols = {r[1] for r in await cur.fetchall()}
        if "inviter" not in cols:
            await conn.execute("ALTER TABLE referrals ADD COLUMN inviter INTEGER")
        cur = await conn.execute("SELECT COUNT(*) FROM referrals WHERE inviter=?", (inviter,))
        row = await cur.fetchone()
        return int(row[0] if row else 0)

async def purchases_summary(user_id: int) -> tuple[int, list[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å—É–º–º–∞_–ø–æ_–ø–æ–∫—É–ø–∫–∞–º, –Ω–∞–∑–≤–∞–Ω–∏—è_–ø–æ—Å–ª–µ–¥–Ω–∏—Ö_5_–ø–æ–∫—É–ø–æ–∫)"""
    async with db() as conn:
        cur = await conn.execute("""
            SELECT COALESCE(SUM(si.price),0)
            FROM purchases p JOIN shop_items si ON si.id=p.item_id
            WHERE p.user_id=?
        """, (user_id,))
        total = int((await cur.fetchone())[0])
        cur = await conn.execute("""
            SELECT si.name
            FROM purchases p JOIN shop_items si ON si.id=p.item_id
            WHERE p.user_id=?
            ORDER BY p.ts DESC
            LIMIT 5
        """, (user_id,))
        names = [r[0] for r in await cur.fetchall()]
    return total, names

# --- REF-CODES (–Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫) ---
ALPH = string.ascii_letters + string.digits

async def get_or_create_ref_code(inviter: int) -> str:
    async with db() as conn:
        cur = await conn.execute("SELECT code FROM ref_codes WHERE inviter=?", (inviter,))
        row = await cur.fetchone()
        if row:
            return row[0]
        import secrets
        code = ''.join(secrets.choice(ALPH) for _ in range(12))
        await conn.execute("INSERT INTO ref_codes(code,inviter) VALUES(?,?)", (code, inviter))
        await conn.commit()
        return code

async def inviter_by_code(code: str) -> Optional[int]:
    async with db() as conn:
        cur = await conn.execute("SELECT inviter FROM ref_codes WHERE code=?", (code,))
        row = await cur.fetchone()
        return int(row[0]) if row else None

# ============================================================
#                 SUBSCRIPTION (CHANNEL) GATE
# ============================================================

async def is_subscribed(user_id: int) -> bool:
    target = RESOLVED_CHANNEL_ID or CHANNEL_USERNAME
    try:
        cm = await bot.get_chat_member(target, user_id)
        status = str(getattr(cm, "status", "")).lower()
        if status in ("member", "administrator", "creator"):
            return True
        if hasattr(cm, "is_member") and bool(getattr(cm, "is_member")):
            return True
        return False
    except Exception as e:
        print("is_subscribed error:", repr(e))
        return False

async def gate_subscription(message: Message) -> bool:
    if await is_subscribed(message.from_user.id):
        return True
    text = (
        "üîî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
        "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ—Ö –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∞–≤–∏–ª."
    )
    if RESOLVED_CHANNEL_ID is None:
        text += "\n\n‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞: –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞."
    await message.answer(text, reply_markup=subscription_kb())
    return False

# ============================================================
#                     MATCHING & SESSION HELPERS
# ============================================================

async def active_peer(tg_id: int) -> Optional[int]:
    if tg_id in ACTIVE:
        return ACTIVE[tg_id][0]
    async with db() as conn:
        cur = await conn.execute(
            "SELECT a_id,b_id FROM matches WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (tg_id, tg_id)
        )
        row = await cur.fetchone()
        if not row:
            return None
        a, b = row
        return b if a == tg_id else a

async def end_current_chat(tg_id: int):
    async with db() as conn:
        await conn.execute("UPDATE matches SET active=0 WHERE active=1 AND (a_id=? OR b_id=?)", (tg_id, tg_id))
        await conn.commit()

async def enqueue(tg_id: int, gender: str, seeking: str):
    async with db() as conn:
        await conn.execute(
            "INSERT OR REPLACE INTO queue(tg_id, gender, seeking, ts) VALUES(?,?,?,strftime('%s','now'))",
            (tg_id, gender, seeking)
        )
        await conn.commit()

async def dequeue(tg_id: int):
    async with db() as conn:
        await conn.execute("DELETE FROM queue WHERE tg_id=?", (tg_id,))
        await conn.commit()

async def record_separation(a: int, b: int):
    async with db() as conn:
        br = g_block_rounds()
        await conn.execute(
            "INSERT INTO recent_partners(u_id,partner_id,block_left) VALUES(?,?,?) "
            "ON CONFLICT(u_id,partner_id) DO UPDATE SET block_left=?",
            (a, b, br, br)
        )
        await conn.execute(
            "INSERT INTO recent_partners(u_id,partner_id,block_left) VALUES(?,?,?) "
            "ON CONFLICT(u_id,partner_id) DO UPDATE SET block_left=?",
            (b, a, br, br)
        )
        await conn.commit()

async def decay_blocks(u_id: int):
    async with db() as conn:
        await conn.execute(
            "UPDATE recent_partners SET block_left=block_left-1 WHERE u_id=? AND block_left>0",
            (u_id,)
        )
        await conn.execute("DELETE FROM recent_partners WHERE u_id=? AND block_left<=0", (u_id,))
        await conn.commit()

async def is_recent_blocked(u_id: int, candidate_id: int) -> bool:
    async with db() as conn:
        cur = await conn.execute(
            "SELECT 1 FROM recent_partners WHERE u_id=? AND partner_id=? AND block_left>0",
            (u_id, candidate_id)
        )
        return (await cur.fetchone()) is not None

async def in_queue(tg_id: int) -> bool:
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM queue WHERE tg_id=?", (tg_id,))
        return (await cur.fetchone()) is not None

def format_profile_text(u: tuple) -> str:
    """
    u = (tg_id, gender, seeking, reveal_ready, first_name, last_name,
         faculty, age, about, username, photo1, photo2, photo3)
    """
    first = (u[4] or "").strip()
    last = (u[5] or "").strip()
    name = first or (last.split()[0] if last else "–ë–µ–∑ –∏–º–µ–Ω–∏")
    age = u[7]
    age_str = str(age) if isinstance(age, int) else "‚Äî"
    faculty = (u[6] or "‚Äî").strip()

    about = (u[8] or "").strip()
    first_line, rest = "", ""
    if about:
        lines = [ln.strip() for ln in about.splitlines() if ln.strip()]
        if lines:
            first_line = lines[0]
            if len(lines) > 1:
                rest = "\n".join(lines[1:])

    header = f"{name}, {age_str}, üìç {faculty}"
    if first_line:
        header += f" ‚Äî {first_line}"
    body = f"\n{rest}" if rest else ""
    username = (u[9] or "").strip()
    tail = f"\n\n{username}" if username else ""
    return header + body + tail

async def find_partner(for_id: int) -> Optional[int]:
    async with db() as conn:
        cur = await conn.execute("SELECT gender,seeking FROM users WHERE tg_id=?", (for_id,))
        me = await cur.fetchone()
        if not me:
            return None
        my_gender, my_seek = me

        cur = await conn.execute("""
            SELECT q.tg_id
            FROM queue q
            JOIN users u ON u.tg_id = q.tg_id
            LEFT JOIN recent_partners rp
                   ON rp.u_id=? AND rp.partner_id=q.tg_id AND rp.block_left>0
            WHERE q.tg_id<>?
              AND ((?='–ù–µ –≤–∞–∂–Ω–æ') OR u.gender=CASE ? WHEN '–ü–∞—Ä–Ω–∏' THEN '–ü–∞—Ä–µ–Ω—å' WHEN '–î–µ–≤—É—à–∫–∏' THEN '–î–µ–≤—É—à–∫–∞' END)
              AND (u.seeking='–ù–µ –≤–∞–∂–Ω–æ' OR u.seeking=CASE ? WHEN '–ü–∞—Ä–µ–Ω—å' THEN '–ü–∞—Ä–Ω–∏' WHEN '–î–µ–≤—É—à–∫–∞' THEN '–î–µ–≤—É—à–∫–∏' END)
              AND rp.partner_id IS NULL
            ORDER BY q.ts ASC
            LIMIT 1
        """, (for_id, for_id, my_seek, my_seek, my_gender))
        row = await cur.fetchone()
        if not row:
            return None
        return int(row[0])

async def start_match(a: int, b: int):
    await decay_blocks(a)
    await decay_blocks(b)
    async with db() as conn:
        await conn.execute("DELETE FROM queue WHERE tg_id IN (?,?)", (a, b))
        cur = await conn.execute("INSERT INTO matches(a_id,b_id) VALUES(?,?)", (a, b))
        mid = cur.lastrowid
        await conn.commit()

    ACTIVE[a] = (b, mid)
    ACTIVE[b] = (a, mid)
    LAST_SEEN[a] = _now()
    LAST_SEEN[b] = _now()
    DEADLINE[mid] = _nowm() + g_inactivity()
    LAST_SHOWN.pop(mid, None)
    WATCH[mid] = asyncio.create_task(_watch_inactivity(mid, a, b))

    sa = await get_status(a)
    sb = await get_status(b)

    pa, pcnt = await get_avg_rating(b)  # —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è A
    ma, mcnt = await get_avg_rating(a)  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ A (–≤–∏–¥–∏—Ç —Å–≤–æ–π)

    pb, bcnt = await get_avg_rating(a)  # —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è B
    mb, bmcnt = await get_avg_rating(b) # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ B

    def fmt(avg, cnt):
        return f"{avg:.1f} ({cnt})" if avg is not None else "‚Äî (0)"

    def greet_line(self_status: Optional[str], peer_rating: str, my_rating: str) -> str:
        who = self_status or "–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
        return (
            f"–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ‚Äî {who}. –í—ã –∞–Ω–æ–Ω–∏–º–Ω—ã.\n"
            f"–†–µ–π—Ç–∏–Ω–≥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {peer_rating}\n"
            f"–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {my_rating}\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n"
            "<code>!next</code> ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
            "<code>!stop</code> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å\n"
            "<code>!reveal</code> ‚Äî –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –µ—Å—Ç—å —É –æ–±–æ–∏—Ö)\n"
        )

    await bot.send_message(a, greet_line(sb, fmt(pa, pcnt), fmt(ma, mcnt)), reply_markup=ReplyKeyboardRemove())
    await bot.send_message(b, greet_line(sa, fmt(pb, bcnt), fmt(mb, bmcnt)), reply_markup=ReplyKeyboardRemove())

async def try_match_now(tg_id: int):
    mate = await find_partner(tg_id)
    if mate:
        await start_match(tg_id, mate)

async def _materialize_session_if_needed(user_id: int) -> Optional[Tuple[int, int]]:
    if user_id in ACTIVE:
        peer_id, mid = ACTIVE[user_id]
        if mid not in WATCH or WATCH[mid].done():
            a = user_id
            b = peer_id
            WATCH[mid] = asyncio.create_task(_watch_inactivity(mid, a, b))
        return ACTIVE[user_id]

    async with db() as conn:
        cur = await conn.execute(
            "SELECT id, a_id, b_id FROM matches WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (user_id, user_id),
        )
        row = await cur.fetchone()

    if not row:
        return None

    mid, a, b = int(row[0]), int(row[1]), int(row[2])
    peer = b if a == user_id else a

    ACTIVE[a] = (b, mid)
    ACTIVE[b] = (a, mid)
    now_wall = _now()
    LAST_SEEN[a] = now_wall
    LAST_SEEN[b] = now_wall
    DEADLINE[mid] = _nowm() + g_inactivity()
    LAST_SHOWN.pop(mid, None)
    if mid not in WATCH or WATCH[mid].done():
        WATCH[mid] = asyncio.create_task(_watch_inactivity(mid, a, b))

    return (peer, mid)

# ============================================================
#                   INACTIVITY WATCHER & COUNTDOWN
# ============================================================

async def _watch_inactivity(mid: int, a: int, b: int):
    try:
        while True:
            await asyncio.sleep(1)
            if a not in ACTIVE or b not in ACTIVE:
                return
            if ACTIVE.get(a, (None, None))[1] != mid or ACTIVE.get(b, (None, None))[1] != mid:
                return

            now = _nowm()
            deadline = DEADLINE.get(mid, now + g_inactivity())
            remaining = ceil(deadline - now)

            if 0 < remaining <= 60 and not WARNED.get(mid):
                WARNED[mid] = True
                warn_text = (
                    f"‚åõÔ∏è –¢–∏—à–∏–Ω–∞‚Ä¶ –ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫.\n"
                    f"–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
                )
                try:
                    ma = await bot.send_message(a, warn_text)
                    mb = await bot.send_message(b, warn_text)
                    COUNTDOWN_MSGS[mid] = (ma.message_id, mb.message_id)
                except Exception:
                    COUNTDOWN_MSGS[mid] = (None, None)
                COUNTDOWN_TASKS[mid] = asyncio.create_task(_countdown(mid, a, b))

            if remaining <= 0:
                await _stop_countdown(mid, a, b, delete_msgs=True)
                await end_current_chat(a)
                await end_current_chat(b)
                _cleanup_match(mid, a, b)
                DEADLINE.pop(mid, None)
                LAST_SHOWN.pop(mid, None)
                try:
                    await bot.send_message(a, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=(await menu_for(a)))
                    await send_post_chat_feedback(a, b, mid)
                    await send_post_chat_feedback(b, a, mid)
                except Exception:
                    pass
                try:
                    await bot.send_message(b, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=(await menu_for(b)))
                    await send_post_chat_feedback(a, b, mid)
                    await send_post_chat_feedback(b, a, mid)
                except Exception:
                    pass
                return
    except asyncio.CancelledError:
        return

def _cleanup_match(mid: int, a: int, b: int):
    ACTIVE.pop(a, None)
    ACTIVE.pop(b, None)
    LAST_SEEN.pop(a, None)
    LAST_SEEN.pop(b, None)
    t = WATCH.pop(mid, None)
    DEADLINE.pop(mid, None)
    LAST_SHOWN.pop(mid, None)
    if t and not t.done():
        t.cancel()
    WARNED.pop(mid, None)

    t2 = COUNTDOWN_TASKS.pop(mid, None)
    if t2 and not t2.done():
        t2.cancel()
    COUNTDOWN_MSGS.pop(mid, None)

async def _countdown(mid: int, a: int, b: int):
    try:
        while True:
            await asyncio.sleep(1)
            if a not in ACTIVE or b not in ACTIVE:
                return
            if ACTIVE.get(a, (None, None))[1] != mid or ACTIVE.get(b, (None, None))[1] != mid:
                return

            now = _nowm()
            deadline = DEADLINE.get(mid, now + g_inactivity())
            remaining = ceil(deadline - now)

            if remaining > 60:
                await _stop_countdown(mid, a, b, delete_msgs=True)
                return
            if remaining <= 0:
                return
            if LAST_SHOWN.get(mid) == remaining:
                continue
            LAST_SHOWN[mid] = remaining

            ids = COUNTDOWN_MSGS.get(mid)
            if ids:
                a_msg, b_msg = ids
                text = f"‚åõÔ∏è –¢–∏—à–∏–Ω–∞‚Ä¶ –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫.\n–ù–∞–ø–∏—à–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                try:
                    if a_msg:
                        await bot.edit_message_text(chat_id=a, message_id=a_msg, text=text)
                except Exception:
                    pass
                try:
                    if b_msg:
                        await bot.edit_message_text(chat_id=b, message_id=b_msg, text=text)
                except Exception:
                    pass
    except asyncio.CancelledError:
        return

async def _stop_countdown(mid: int, a: int, b: int, delete_msgs: bool = True):
    t = COUNTDOWN_TASKS.pop(mid, None)
    if t and not t.done():
        t.cancel()

    ids = COUNTDOWN_MSGS.pop(mid, None)
    if delete_msgs and ids:
        a_msg, b_msg = ids
        try:
            if a_msg:
                await bot.delete_message(chat_id=a, message_id=a_msg)
        except Exception:
            pass
        try:
            if b_msg:
                await bot.delete_message(chat_id=b, message_id=b_msg)
        except Exception:
            pass
    WARNED.pop(mid, None)

# ============================================================
#                    MISC HELPERS (FORM ETC.)
# ============================================================

async def _require_username(m: Message) -> bool:
    uname = m.from_user.username or ""
    if uname:
        return True
    await m.answer(
        "‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username –≤ Telegram.\n"
        "–û—Ç–∫—Ä–æ–π ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∏ –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞.",
        reply_markup=main_menu()
    )
    return False

# ============================================================
#                         CALLBACKS
# ============================================================

@dp.callback_query(F.data.regexp(r"^rate:\d+:\d$"))
async def cb_rate(c: CallbackQuery):
    try:
        _, mid_s, stars_s = c.data.split(":")
        mid = int(mid_s); stars = int(stars_s)
        assert 1 <= stars <= 5
    except Exception:
        return await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ –∏ —É–∑–Ω–∞—ë–º peer
    async with db() as conn:
        cur = await conn.execute("SELECT a_id,b_id FROM matches WHERE id=?", (mid,))
        row = await cur.fetchone()
    if not row:
        return await c.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    a_id, b_id = int(row[0]), int(row[1])
    if c.from_user.id not in (a_id, b_id):
        return await c.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –¥–∏–∞–ª–æ–≥.", show_alert=True)

    to_user = b_id if c.from_user.id == a_id else a_id

    # –ø–∏—à–µ–º/—Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –º–∞—Ç—á)
    try:
        async with db() as conn:
            await conn.execute(
                "INSERT OR IGNORE INTO ratings(match_id,from_user,to_user,stars) VALUES(?,?,?,?)",
                (mid, c.from_user.id, to_user, stars)
            )
            await conn.commit()
    except Exception:
        pass

    try:
        await safe_edit_message(c.message, text="–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=None)
    except Exception:
        pass
    await c.answer("–û—Ü–µ–Ω–∫–∞ —É—á—Ç–µ–Ω–∞.")

@dp.callback_query(F.data.regexp(r"^complain:\d+$"))
async def cb_complain(c: CallbackQuery, state: FSMContext):
    mid = int(c.data.split(":")[1])

    async with db() as conn:
        cur = await conn.execute("SELECT a_id,b_id FROM matches WHERE id=?", (mid,))
        row = await cur.fetchone()
    if not row:
        return await c.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    a_id, b_id = int(row[0]), int(row[1])
    about_id = b_id if c.from_user.id == a_id else a_id
    await state.set_state(ComplaintState.wait_text)
    await state.update_data(mid=mid, about_id=about_id)

    await c.answer()
    try:
        await safe_edit_message(c.message, text="–û–ø–∏—à–∏ –∂–∞–ª–æ–±—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.", reply_markup=None)
    except Exception:
        pass

@dp.callback_query(F.data == "sub_check")
async def sub_check(c: CallbackQuery):
    if await is_subscribed(c.from_user.id):
        try:
            await c.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        except Exception:
            pass
        await c.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await bot.send_message(
            c.from_user.id, intro_text(), disable_web_page_preview=True, reply_markup=main_menu()
        )
    else:
        await c.answer(
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∞ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.",
            show_alert=False
        )

@dp.callback_query(F.data.startswith("shop_buy:"))
async def shop_buy(c: CallbackQuery):
    if await get_role(c.from_user.id) == "admin":
        await c.answer("–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.", show_alert=True)
        return
    item_id = int(c.data.split(":")[1])
    item = await get_item(item_id)
    if not item:
        await c.answer("–¢–æ–≤–∞—Ä —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return
    _id, name, price, type_, payload = item
    pts = await get_points(c.from_user.id)
    if pts < price:
        await c.answer(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—á–∫–æ–≤. –ù—É–∂–Ω–æ {price}, —É —Ç–µ–±—è {pts}.", show_alert=True)
        return

    await add_points(c.from_user.id, -price)
    applied_msg = ""
    if type_ == "status":
        # –ö–ª–∞–¥—ë–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å—Ä–∞–∑—É —ç–∫–∏–ø–∏—Ä—É–µ–º
        await add_status_to_inventory(c.from_user.id, payload)
        await set_status(c.from_user.id, payload)
        applied_msg = f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: ¬´{payload}¬ª. (–î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)"
    elif type_ == "privilege":
        applied_msg = f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {payload}"
    async with db() as conn:
        await conn.execute("INSERT INTO purchases(user_id,item_id) VALUES(?,?)", (c.from_user.id, _id))
        await conn.commit()
    new_pts = await get_points(c.from_user.id)
    try:
        await c.message.edit_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ ¬´{name}¬ª –∑–∞ {price}üí∞ —É—Å–ø–µ—à–Ω–∞!\n{applied_msg}\n–ë–∞–ª–∞–Ω—Å: {new_pts}.", reply_markup=None
        )
    except Exception:
        pass
    await c.answer("–ì–æ—Ç–æ–≤–æ!")

# ============================================================
#                        COMMAND GUARD
# ============================================================

@dp.message(F.text.in_({"üß≠ –†–µ–∂–∏–º—ã", "üë§ –ê–Ω–∫–µ—Ç–∞", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç",
                        "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", "üí∞ –ë–∞–ª–∞–Ω—Å", "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"}))
async def block_menu_buttons_in_chat(m: Message):
    if await is_chat_active(m.from_user.id):
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã relay_chat –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        raise SkipHandler
    # –µ—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç ‚Äî —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Ü–µ–ª–µ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    raise SkipHandler

@dp.message(ComplaintState.wait_text)
async def complaint_text(m: Message, state: FSMContext):
    d = await state.get_data()
    mid = int(d.get("mid")); about_id = int(d.get("about_id"))
    text = (m.text or "").strip()

    async with db() as conn:
        await conn.execute(
            "INSERT INTO complaints(match_id,from_user,about_user,text) VALUES(?,?,?,?)",
            (mid, m.from_user.id, about_id, text)
        )
        await conn.commit()

    # —à–ª—ë–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in (ADMIN_IDS or []):
        try:
            await bot.send_message(
                admin_id,
                f"üö© –ñ–∞–ª–æ–±–∞ –æ—Ç <code>{m.from_user.id}</code> –Ω–∞ <code>{about_id}</code>\n"
                f"–ú–∞—Ç—á: <code>{mid}</code>\n\n{text}"
            )
        except Exception:
            pass

    await state.clear()
    await m.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º. –°–ø–∞—Å–∏–±–æ!", reply_markup=(await menu_for(m.from_user.id)))

@dp.message(F.text == "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def rate_from_menu(m: Message):
    if await deny_actions_during_chat(m):
        return
    info = await last_match_info(m.from_user.id)
    if not info:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ —Å –∫–µ–º ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤.", reply_markup=(await menu_for(m.from_user.id)))
    mid, peer, _active = info

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ç—á
    async with db() as conn:
        cur = await conn.execute("SELECT 1 FROM ratings WHERE match_id=? AND from_user=?", (mid, m.from_user.id))
        done = await cur.fetchone()
    if done:
        return await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ü–µ–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=(await menu_for(m.from_user.id)))

    await m.answer("–û—Ü–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=rate_or_complain_kb(mid))

@dp.message(F.text == "üö© –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def complain_from_menu(m: Message, state: FSMContext):
    if await deny_actions_during_chat(m):
        return
    info = await last_match_info(m.from_user.id)
    if not info:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ –Ω–∞ –∫–æ–≥–æ ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤.", reply_markup=(await menu_for(m.from_user.id)))
    mid, peer, _active = info
    await state.set_state(ComplaintState.wait_text)
    await state.update_data(mid=mid, about_id=peer)
    await m.answer("–û–ø–∏—à–∏ –∂–∞–ª–æ–±—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ.", reply_markup=cancel_kb())

@dp.message(F.text.regexp(r"^/"))
async def block_slash_cmds_in_chat(m: Message):
    if await is_chat_active(m.from_user.id):
        await _materialize_session_if_needed(m.from_user.id)
        await m.answer(BLOCK_TXT, reply_markup=ReplyKeyboardRemove())
        return
    # –≤–∞–∂–Ω–æ–µ: –æ—Ç–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–º–∞–Ω–¥–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
    raise SkipHandler

# ============================================================
#                         BASIC COMMANDS
# ============================================================

@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    if await deny_actions_during_chat(m):
        return
    if not await gate_subscription(m):
        return

    await ensure_user(m.from_user.id)

    # deep-link /start ref_<id>
    try:
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) == 2:
            arg = parts[1]
            inviter_id: Optional[int] = None
            if arg.startswith("r_"):               # –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
                code = arg[2:]
                inviter_id = await inviter_by_code(code)
            elif arg.startswith("ref_"):           # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                inviter_id = int(arg[4:])
            if inviter_id and await register_referral(inviter_id, m.from_user.id):
                await add_points(inviter_id, g_ref_bonus())
                try:
                    await bot.send_message(inviter_id, f"üéâ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! +{g_ref_bonus()} –æ—á–∫–æ–≤.")
                except Exception:
                    pass
    except Exception:
        pass

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer(intro_text(), disable_web_page_preview=True)
        await m.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å. –ó–∞—Ç–µ–º, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏.",
            reply_markup=gender_self_kb()
        )
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –¥–µ–∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ (–∞–Ω–∫–µ—Ç—ã) –Ω—É–∂–µ–Ω @username –≤ Telegram. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ.")
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))

@dp.message(Command("help"))
async def cmd_help(m: Message):
    if await deny_actions_during_chat(m):
        return
    await m.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
        "–û—Å–Ω–æ–≤–Ω–æ–µ:\n"
        "‚Ä¢ /profile ‚Äî —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –±–∞–ª–∞–Ω—Å, –ø–æ–∫—É–ø–∫–∏\n"
        "‚Ä¢ /market ‚Äî –º–∞–≥–∞–∑–∏–Ω —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
        "‚Ä¢ /ref ‚Äî —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç:\n"
        "‚Ä¢ ¬´üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç¬ª ‚Üí ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª\n"
        "‚Ä¢ !next ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "‚Ä¢ !stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç\n"
        "‚Ä¢ !reveal ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã —É –æ–±–æ–∏—Ö)\n\n"
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n"
        "‚Ä¢ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
        reply_markup=(await menu_for(m.from_user.id))
    )

@dp.message(Command("profile"))
async def cmd_profile(m: Message):
    if await deny_actions_during_chat(m):
        return

    await ensure_user(m.from_user.id)
    u = await get_user_or_create(m.from_user.id)
    await ensure_free_statuses(m.from_user.id)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    pts = await get_points(m.from_user.id)
    status = await get_status(m.from_user.id) or "‚Äî"
    avg, cnt = await get_avg_rating(m.from_user.id)
    rate_line = f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {avg:.1f} ({cnt})" if avg is not None else "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ‚Äî (0)"
    ref_cnt = await count_referrals(m.from_user.id)
    spent_total, last5 = await purchases_summary(m.from_user.id)

    gender = u[1] or "‚Äî"
    seeking = u[2] or "‚Äî"
    ready = "–î–∞" if (u[3] == 1) else "–ù–µ—Ç"
    uname = u[9] or "‚Äî"

    inv = await get_status_inventory(m.from_user.id)
    inv_txt = "–Ω–µ—Ç" if not inv else ", ".join(inv)

    lines = [
        "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>",
        "",
        "<b>–û—Å–Ω–æ–≤–Ω–æ–µ:</b>",
        f"‚Ä¢ ID: <code>{m.from_user.id}</code>",
        f"‚Ä¢ Username: {uname}",
        f"‚Ä¢ –ü–æ–ª/–∏–Ω—Ç–µ—Ä–µ—Å: {gender} ‚Üí {seeking}",
        f"‚Ä¢ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: {ready}",
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: <b>{pts}</b> –æ—á–∫–æ–≤",
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}",
        rate_line,
        "",
        "<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤:</b>",
        inv_txt if inv_txt else "–Ω–µ—Ç",
        "",
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_cnt}",
        f"üõí –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {spent_total} –æ—á–∫–æ–≤",
    ]
    if last5:
        lines.append("\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>")
        lines += [f"‚Ä¢ {n}" for n in last5]

    kb = statuses_kb(inv, await get_status(m.from_user.id)) if inv else None
    await m.answer("\n".join(lines), reply_markup=kb or (await menu_for(m.from_user.id)))

@dp.message(Command("market"))
async def cmd_market(m: Message):
    if await deny_actions_during_chat(m):
        return
    if await get_role(m.from_user.id) == "admin":
        return await m.answer("–¢—ã –∞–¥–º–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π /admin.", reply_markup=(await menu_for(m.from_user.id)))
    items = await list_items()
    if not items:
        return await m.answer("üõç –ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç.", reply_markup=(await menu_for(m.from_user.id)))
    await m.answer("üõç –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π. –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:", reply_markup=shop_kb(items))

@dp.message(Command("ref"))
async def cmd_ref(m: Message):
    if await deny_actions_during_chat(m):
        return
    await ensure_user(m.from_user.id)
    me = await bot.get_me()
    bot_user = me.username or ""
    code = await get_or_create_ref_code(m.from_user.id)
    link = f"https://t.me/{bot_user}?start=r_{code}" if bot_user else "‚Äî"
    cnt = await count_referrals(m.from_user.id)
    bonus = cnt * g_ref_bonus()
    await m.answer(
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {link}\n"
        f"–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{cnt}</b>\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: <b>{bonus}</b> –æ—á–∫–æ–≤\n\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: +{g_ref_bonus()} –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        disable_web_page_preview=True
    )

@dp.message(Command("daily"))
async def daily(m: Message):
    if await deny_actions_during_chat(m):
        return
    await ensure_user(m.from_user.id)

    can_take, remaining = await can_take_daily_cooldown(m.from_user.id)
    if not can_take:
        return await m.answer(
            f"–°–µ–≥–æ–¥–Ω—è –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –°–Ω–æ–≤–∞ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {_fmt_hhmmss(remaining)}."
        )

    await add_points(m.from_user.id, g_daily_bonus())
    await mark_daily_taken(m.from_user.id)
    pts = await get_points(m.from_user.id)
    await m.answer(f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å +{g_daily_bonus()} –æ—á–∫–æ–≤! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {pts}.")

COOLDOWN_SECONDS = 24 * 60 * 60  # 24 —á–∞—Å–∞

def _fmt_hhmmss(sec: int) -> str:
    h = sec // 3600
    m = (sec % 3600) // 60
    s = sec % 60
    return f"{h:02d}:{m:02d}:{s:02d}"

async def can_take_daily_cooldown(tg_id: int) -> tuple[bool, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (can_take, remaining_seconds).
    can_take == True, –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–±–æ—Ä–∞ –ø—Ä–æ—à–ª–æ >= 24 —á–∞—Å–æ–≤.
    """
    async with db() as conn:
        cur = await conn.execute("SELECT COALESCE(last_daily, 0) FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        last = int(row[0] if row else 0)

    if last == 0:
        return True, 0

    elapsed = int(time.time()) - last
    if elapsed >= COOLDOWN_SECONDS:
        return True, 0
    return False, COOLDOWN_SECONDS - elapsed

async def mark_daily_taken(tg_id: int):
    await set_user_fields(tg_id, last_daily=int(time.time()))

@dp.message(Command("admin"))
async def admin_panel(m: Message, state: FSMContext):
    if await deny_actions_during_chat(m):
        return
    await ensure_user(m.from_user.id)
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.clear()
    await m.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_main_kb())

@dp.callback_query(F.data == "admin:home")
async def admin_home(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    await state.clear()
    await safe_edit_message(c.message, text="üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_main_kb())

@dp.callback_query(F.data.startswith("use_status:"))
async def cb_use_status(c: CallbackQuery):
    val = c.data.split(":", 1)[1]
    if val == "__none__":
        await set_status(c.from_user.id, None)
        await c.answer("–°—Ç–∞—Ç—É—Å —Å–Ω—è—Ç.")
    else:
        inv = await get_status_inventory(c.from_user.id)
        if val not in inv:
            return await c.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
        await set_status(c.from_user.id, val)
        await c.answer(f"–í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å: ¬´{val}¬ª.")
    # –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø—Ä—è–º–æ –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª–µ–º
    inv = await get_status_inventory(c.from_user.id)
    try:
        await safe_edit_message(c.message, reply_markup=statuses_kb(inv, await get_status(c.from_user.id)))
    except Exception:
        pass

@dp.callback_query(F.data == "admin:shop")
async def admin_shop(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    await safe_edit_message(c.message, text="üõç –ú–∞–≥–∞–∑–∏–Ω", reply_markup=admin_shop_kb())

@dp.callback_query(F.data == "admin:shop:list")
async def admin_shop_list(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    items = await list_items()
    txt = "üì¶ –¢–æ–≤–∞—Ä—ã:\n" + ("\n".join([f"{i[0]}. {i[1]} ‚Äî {i[2]}üí∞ [{i[3]}] {i[4] or ''}" for i in items]) or "–ø—É—Å—Ç–æ")
    await safe_edit_message(c.message, text=txt, reply_markup=admin_shop_kb())

@dp.callback_query(F.data == "admin:shop:add")
async def admin_shop_add(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(AdminAddItem.wait_name)
    await c.message.edit_text("üß© –®–∞–≥ 1/4: –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–∞–º—ã–π –°–∫—Ä–æ–º–Ω—ã–π</code>")

@dp.callback_query(F.data == "admin:grant")
async def admin_grant_start(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    await state.set_state(AdminGrantPoints.wait_user_id)
    await c.message.edit_text("üí≥ –ö–æ–º—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏? –í–≤–µ–¥–∏ <code>tg_id</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@dp.message(AdminGrantPoints.wait_user_id)
async def admin_grant_user(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        await state.clear()
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        uid = int((m.text or "").strip())
    except Exception:
        return await m.answer("–ù—É–∂–µ–Ω —Ü–µ–ª—ã–π <code>tg_id</code>. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    await ensure_user(uid)
    await state.update_data(grant_uid=uid)
    await state.set_state(AdminGrantPoints.wait_amount)
    await m.answer(f"–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code>? "
                   "–ú–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å.")

@dp.message(AdminGrantPoints.wait_amount)
async def admin_grant_amount(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        await state.clear()
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        amount = int((m.text or "").strip())
    except Exception:
        return await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ -20). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    data = await state.get_data()
    uid = int(data.get("grant_uid"))
    await ensure_user(uid)
    await add_points(uid, amount)
    new_pts = await get_points(uid)
    await state.clear()
    try:
        await bot.send_message(uid, f"üí≥ –¢–µ–±–µ {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if amount>=0 else '—Å–ø–∏—Å–∞–Ω–æ'} {abs(amount)} –æ—á–∫–æ–≤. –ë–∞–ª–∞–Ω—Å: {new_pts}.")
    except Exception:
        pass
    await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code>: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {amount} –æ—á–∫–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_pts}.",
                   reply_markup=admin_main_kb())

def admin_reply_menu() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üõ† –ê–¥–º–∏–Ω"))
    return kb.as_markup(resize_keyboard=True)

async def menu_for(user_id: int) -> ReplyKeyboardMarkup:
    role = await get_role(user_id)
    if role == "admin" or user_id in ADMIN_IDS:
        return admin_reply_menu()
    return main_menu()

@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω")
async def open_admin_from_button(m: Message, state: FSMContext):
    return await admin_panel(m, state)

@dp.message(AdminAddItem.wait_name)
async def admin_shop_add_name(m: Message, state: FSMContext):
    await state.update_data(name=(m.text or "").strip())
    await state.set_state(AdminAddItem.wait_price)
    await m.answer("üß© –®–∞–≥ 2/4: –¶–µ–Ω–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>50</code>")

@dp.message(AdminAddItem.wait_price)
async def admin_shop_add_price(m: Message, state: FSMContext):
    try:
        price = int((m.text or "").strip())
        if price < 0: raise ValueError
    except Exception:
        return await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    await state.update_data(price=price)
    await state.set_state(AdminAddItem.wait_type)
    await m.answer("üß© –®–∞–≥ 3/4: –¢–∏–ø ‚Äî –Ω–∞–ø–∏—à–∏ <code>status</code> –∏–ª–∏ <code>privilege</code>")

@dp.message(AdminAddItem.wait_type)
async def admin_shop_add_type(m: Message, state: FSMContext):
    t = (m.text or "").strip().lower()
    if t not in {"status", "privilege"}:
        return await m.answer("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <code>status</code> –∏–ª–∏ <code>privilege</code>.")
    await state.update_data(type=t)
    await state.set_state(AdminAddItem.wait_payload)
    await m.answer("üß© –®–∞–≥ 4/4: Payload ‚Äî —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞/–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏")

@dp.message(AdminAddItem.wait_payload)
async def admin_shop_add_payload(m: Message, state: FSMContext):
    d = await state.get_data()
    await add_item(d["name"], d["price"], d["type"], (m.text or "").strip())
    await state.clear()
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_shop_kb())

@dp.callback_query(F.data == "admin:shop:del")
async def admin_shop_del(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(AdminShopDel.wait_id)
    await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–∏—Ç—å (—Å–º. ¬´üì¶ –°–ø–∏—Å–æ–∫¬ª).")

@dp.message(AdminShopDel.wait_id)
async def admin_shop_del_id(m: Message, state: FSMContext):
    try:
        await del_item(int((m.text or "").strip()))
        await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_shop_kb())
    except Exception:
        await m.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å ID.", reply_markup=admin_shop_kb())
    await state.clear()

@dp.callback_query(F.data == "admin:settings")
async def admin_settings(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    await safe_edit_message(c.message, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=admin_settings_kb())

@dp.message(AdminGrantPoints.wait_user_id, F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "üõ† –ê–¥–º–∏–Ω", "/admin"}))
@dp.message(AdminGrantPoints.wait_amount,  F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "üõ† –ê–¥–º–∏–Ω", "/admin"}))
async def admin_grant_cancel(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        await state.clear()
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_main_kb())

@dp.callback_query(F.data.startswith("admin:set:"))
async def admin_settings_select(c: CallbackQuery, state: FSMContext):
    key = c.data.split(":", 2)[2]
    if key == "support_toggle":
        await set_setting("support_enabled", "0" if g_support_enabled() else "1")
        await safe_edit_message(c.message, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=admin_settings_kb())
        return
    # –∂–¥—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    await state.set_state(AdminSettings.wait_value)
    await state.update_data(key=key)
    nice = {
        "inactivity_seconds": "‚è±Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–µ–∫)",
        "block_rounds": "üîÅ –ë–ª–æ–∫-—Ä–∞—É–Ω–¥–æ–≤",
        "daily_bonus_points": "üéÅ Daily –±–æ–Ω—É—Å",
        "ref_bonus_points": "üéØ Referral –±–æ–Ω—É—Å",
    }.get(key, key)
    await c.message.edit_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: <b>{nice}</b>\n(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")

@dp.message(AdminSettings.wait_value)
async def admin_settings_set(m: Message, state: FSMContext):
    d = await state.get_data()
    key = d.get("key")
    try:
        val = int((m.text or "").strip())
        if val < 0: raise ValueError
    except Exception:
        return await m.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    await set_setting(key, str(val))
    await state.clear()
    # –º–∞–ª–µ–Ω—å–∫–∏–π UX: –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏ inactivity ‚Äî –º—è–≥–∫–æ –ø—Ä–æ–¥–ª–∏–º –¥–µ–¥–ª–∞–π–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    if key == "inactivity_seconds":
        now = _nowm()
        for mid in list(DEADLINE.keys()):
            DEADLINE[mid] = now + g_inactivity()
    await m.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=admin_settings_kb())

async def list_admin_ids() -> list[int]:
    async with db() as conn:
        cur = await conn.execute("SELECT tg_id FROM users WHERE role='admin' ORDER BY tg_id ASC")
        return [int(x[0]) for x in await cur.fetchall()]

@dp.callback_query(F.data == "admin:admins")
async def admin_admins(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    ids = await list_admin_ids()
    txt = "üë• –ê–¥–º–∏–Ω—ã:\n" + ("\n".join([f"‚Ä¢ <code>{i}</code>" for i in ids]) or "–ø–æ–∫–∞ –ø—É—Å—Ç–æ")
    await safe_edit_message(c.message, text=txt, reply_markup=admin_admins_kb())

@dp.callback_query(F.data == "admin:admins:add")
async def admin_admins_add(c: CallbackQuery, state: FSMContext):
    await state.set_state(AdminAdmins.mode)
    await state.update_data(mode="add")
    await state.set_state(AdminAdmins.wait_user_id)
    await c.message.edit_text("–í–≤–µ–¥–∏ <code>tg_id</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.")

@dp.callback_query(F.data == "admin:admins:del")
async def admin_admins_del(c: CallbackQuery, state: FSMContext):
    await state.set_state(AdminAdmins.mode)
    await state.update_data(mode="del")
    await state.set_state(AdminAdmins.wait_user_id)
    await c.message.edit_text("–í–≤–µ–¥–∏ <code>tg_id</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")

@dp.message(AdminAdmins.wait_user_id)
async def admin_admins_apply(m: Message, state: FSMContext):
    d = await state.get_data()
    mode = d.get("mode")
    try:
        uid = int((m.text or "").strip())
    except Exception:
        return await m.answer("–ù—É–∂–µ–Ω —Ü–µ–ª—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    if uid == m.from_user.id:
        return await m.answer("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º.")
    await ensure_user(uid)
    async with db() as conn:
        if mode == "add":
            await conn.execute("UPDATE users SET role='admin' WHERE tg_id=?", (uid,))
            await conn.commit()
            await m.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.", reply_markup=admin_admins_kb())
        else:
            await conn.execute("UPDATE users SET role='user' WHERE tg_id=?", (uid,))
            await conn.commit()
            await m.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.", reply_markup=admin_admins_kb())
    await state.clear()

@dp.callback_query(F.data == "admin:support")
async def admin_support_menu(c: CallbackQuery, state: FSMContext):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return
    await c.message.edit_text("–î–∏–∞–ª–æ–≥–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞ (–æ—Ç–∫—Ä—ã—Ç—ã–µ):")
    async with db() as conn:
        cur = await conn.execute("""
            SELECT from_user, MAX(ts) AS last_ts
            FROM support_msgs
            WHERE status='open'
            GROUP BY from_user
            ORDER BY last_ts DESC
            LIMIT 10
        """)
        users = await cur.fetchall()
    if not users:
        return await bot.send_message(c.from_user.id, "–ü—É—Å—Ç–æ. –ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç.", reply_markup=admin_main_kb())
    for (uid, _) in users:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin:support:reply:{uid}")
        kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"sup_close:{uid}")  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π
        kb.adjust(2)
        await bot.send_message(c.from_user.id, f"<b>#{uid}</b> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("admin:support:reply:"))
async def admin_support_reply_start(c: CallbackQuery, state: FSMContext):
    uid = int(c.data.split(":")[-1])
    await state.set_state(AdminSupportReply.wait_text)
    await state.update_data(uid=uid)
    await c.answer()
    await bot.send_message(c.from_user.id, f"–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{uid}</code> (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")

@dp.message(AdminSupportReply.wait_text)
async def admin_support_reply_send(m: Message, state: FSMContext):
    d = await state.get_data()
    uid = d.get("uid")
    await bot.send_message(uid, f"üõ† –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:\n{m.text}")
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ ¬´–∑–∞–∫—Ä—ã—Ç–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å¬ª: –º–æ–∂–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await m.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=admin_main_kb())
    await state.clear()

@dp.callback_query(F.data == "admin:broadcast")
async def admin_broadcast_start(c: CallbackQuery, state: FSMContext):
    await state.set_state(AdminBroadcast.wait_text)
    await c.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—É–π–¥—ë—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")

@dp.message(AdminBroadcast.wait_text)
async def admin_broadcast_run(m: Message, state: FSMContext):
    text = m.text or ""
    await state.clear()
    # —Å–æ–±–∏—Ä–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    uids = []
    async with db() as conn:
        cur = await conn.execute("SELECT tg_id FROM users")
        uids = [int(x[0]) for x in await cur.fetchall()]
    ok = 0
    for uid in uids:
        try:
            await bot.send_message(uid, text)
            ok += 1
        except Exception:
            pass
        await asyncio.sleep(0.05)  # –º—è–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
    await m.answer(f"üì£ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {ok}/{len(uids)}", reply_markup=admin_main_kb())

@dp.callback_query(F.data == "admin:stats")
async def admin_stats(c: CallbackQuery):
    async with db() as conn:
        ucnt = (await (await conn.execute("SELECT COUNT(*) FROM users")).fetchone())[0]
        qcnt = (await (await conn.execute("SELECT COUNT(*) FROM queue")).fetchone())[0]
        mact = (await (await conn.execute("SELECT COUNT(*) FROM matches WHERE active=1")).fetchone())[0]
        mtotal = (await (await conn.execute("SELECT COUNT(*) FROM matches")).fetchone())[0]
        sup_open = (await (await conn.execute("SELECT COUNT(*) FROM support_msgs WHERE status='open'")).fetchone())[0]
        ref_cnt = (await (await conn.execute("SELECT COUNT(*) FROM referrals")).fetchone())[0]
    txt = (
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{ucnt}</b>\n"
        f"üßç‚Äç‚ôÄÔ∏èüßç‚Äç‚ôÇÔ∏è –í –æ—á–µ—Ä–µ–¥–∏: <b>{qcnt}</b>\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: <b>{mact}</b>\n"
        f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: <b>{mtotal}</b>\n"
        f"üÜò –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: <b>{sup_open}</b>\n"
        f"üéØ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Å–µ–≥–æ: <b>{ref_cnt}</b>\n"
        f"\n‚öôÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {g_inactivity()} c | –ë–ª–æ–∫-—Ä–∞—É–Ω–¥–æ–≤: {g_block_rounds()}\n"
        f"üéÅ Daily: {g_daily_bonus()} | üéØ Referral: {g_ref_bonus()}\n"
        f"üÜò Support: {'ON' if g_support_enabled() else 'OFF'}"
    )
    await safe_edit_message(c.message, text=txt, reply_markup=admin_main_kb())

@dp.callback_query(F.data == "adm_list")
async def adm_list(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    items = await list_items()
    txt = "üì¶ –¢–æ–≤–∞—Ä—ã:\n" + ("\n".join([f"{i[0]}. {i[1]} ‚Äî {i[2]}üí∞ [{i[3]}] {i[4] or ''}" for i in items]) or "–ø—É—Å—Ç–æ")
    await c.message.edit_text(txt)

@dp.callback_query(F.data == "adm_add")
async def adm_add(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await c.message.edit_text(
        "–§–æ—Ä–º–∞—Ç:\n<code>/add_item –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | status|privilege | payload</code>\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>/add_item –°–∞–º—ã–π –°–∫—Ä–æ–º–Ω—ã–π | 50 | status | –°–∞–º—ã–π –°–∫—Ä–æ–º–Ω—ã–π</code>"
    )

@dp.message(Command("grant"))
async def admin_grant_cmd(m: Message):
    if await deny_actions_during_chat(m):
        return
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    # –§–æ—Ä–º–∞—Ç: /grant <tg_id> <amount> [reason...]
    parts = (m.text or "").strip().split(maxsplit=3)
    if len(parts) < 3:
        return await m.answer("–§–æ—Ä–º–∞—Ç: <code>/grant &lt;tg_id&gt; &lt;amount&gt; [reason]</code>\n"
                              "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/grant 123456789 50 –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>")
    try:
        _, uid_s, amt_s, *maybe_reason = parts
        uid = int(uid_s)
        amount = int(amt_s)
        reason = maybe_reason[0] if maybe_reason else ""
    except Exception:
        return await m.answer("–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>/grant 123456789 50 –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</code>")
    await ensure_user(uid)
    await add_points(uid, amount)
    new_pts = await get_points(uid)
    try:
        note = f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""
        await bot.send_message(uid, f"üí≥ –¢–µ–±–µ {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if amount>=0 else '—Å–ø–∏—Å–∞–Ω–æ'} {abs(amount)} –æ—á–∫–æ–≤.{note}\n–ë–∞–ª–∞–Ω—Å: {new_pts}.")
    except Exception:
        pass
    await m.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{uid}</code> {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if amount>=0 else '—Å–ø–∏—Å–∞–Ω–æ'} {abs(amount)} –æ—á–∫–æ–≤."
                   f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_pts}.")

@dp.message(Command("add_item"))
async def adm_add_cmd(m: Message):
    if await deny_actions_during_chat(m):
        return
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        _, rest = m.text.split(" ", 1)
        name, price, type_, payload = [x.strip() for x in rest.split("|", 3)]
        assert type_ in ("status", "privilege")
        price = int(price)
    except Exception:
        return await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/add_item –ù–∞–∑–≤–∞–Ω–∏–µ | 50 | status | –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞")
    await add_item(name, price, type_, payload)
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.callback_query(F.data == "adm_del")
async def adm_del(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É: <code>/del_item ID</code>")

@dp.message(Command("del_item"))
async def adm_del_cmd(m: Message):
    if await deny_actions_during_chat(m):
        return
    if await get_role(m.from_user.id) != "admin" and m.from_user.id not in ADMIN_IDS:
        return await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    try:
        _cmd, sid = m.text.strip().split(maxsplit=1)
        await del_item(int(sid))
        await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ.")
    except Exception:
        await m.answer("–§–æ—Ä–º–∞—Ç: /del_item 3")

# ============================================================
#                          MODES & MENUS
# ============================================================

@dp.message(F.text == "üß≠ –†–µ–∂–∏–º—ã")
async def modes_entry(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) == "admin" or m.from_user.id in ADMIN_IDS:
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω—É. –û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å: /admin", reply_markup=admin_reply_menu())
        return
    if await deny_actions_during_chat(m):
        return
    if not await gate_subscription(m):
        return
    await state.clear()
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"
        "<b>üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç</b> ‚Äî –ª–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
        "<b>üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b> ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è",
        reply_markup=modes_kb()
    )

@dp.message(F.text == "üìá –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç")
async def mode_cards(m: Message):
    if await deny_actions_during_chat(m):
        return
    await m.answer("–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç¬ª ‚Äî <b>–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>.", reply_markup=modes_kb())

@dp.message(F.text == "üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç")
async def mode_anon_chat(m: Message):
    if await get_role(m.from_user.id) == "admin" or m.from_user.id in ADMIN_IDS:
        await m.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω—É. –û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å: /admin", reply_markup=admin_reply_menu())
        return
    if await deny_actions_during_chat(m):
        return
    if not await gate_subscription(m):
        return
    await m.answer(
        "–†–µ–∂–∏–º ¬´–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=anon_chat_menu_kb()
    )

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(m: Message):
    if await deny_actions_during_chat(m):
        return
    await ensure_user(m.from_user.id)
    pts = await get_points(m.from_user.id)
    st = await get_status(m.from_user.id)
    st_txt = f"\n–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: ¬´{st}¬ª" if st else ""
    await m.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{pts}</b> –æ—á–∫–æ–≤.{st_txt}", reply_markup=(await menu_for(m.from_user.id)))

# ========== GLOBAL ¬´–û—Ç–º–µ–Ω–∞¬ª ==========
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def global_cancel(m: Message, state: FSMContext):
    # ‚õî –í–æ –≤—Ä–µ–º—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∏—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.
    # –û—Ç–ø—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç –¥–∞–ª—å—à–µ ‚Äî –µ–≥–æ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç relay_chat –∏ –ø–µ—Ä–µ—à–ª—ë—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    if await is_chat_active(m.from_user.id):
        raise SkipHandler

    cur_state = await state.get_state()
    data = await state.get_data()
    refill_mode = bool(data.get("refill_mode"))

    # 1) –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ä–º–µ –∞–Ω–∫–µ—Ç—ã
    if cur_state in {
        RevealForm.name.state, RevealForm.faculty.state, RevealForm.age.state,
        RevealForm.about.state, RevealForm.photos.state,
    }:
        await state.clear()
        if refill_mode:
            await m.answer("–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°—Ç–∞—Ä–∞—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=(await menu_for(m.from_user.id)))
        else:
            await set_user_fields(
                m.from_user.id, reveal_ready=0,
                first_name=None, last_name=None, faculty=None,
                age=None, about=None, photo1=None, photo2=None, photo3=None
            )
            await m.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 2) –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if cur_state == SupportState.waiting.state:
        await state.clear()
        await m.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 3) –ï—Å–ª–∏ —Å—Ç–æ–∏—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if await in_queue(m.from_user.id):
        await dequeue(m.from_user.id)
        await m.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=(await menu_for(m.from_user.id)))
        return

    # 4) –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))

# ================== –ü—Ä–æ—Ñ–∏–ª—å/–∞–Ω–∫–µ—Ç–∞ (–≤—Ö–æ–¥) ==================
@dp.message(F.text == "üë§ –ê–Ω–∫–µ—Ç–∞")
async def show_or_edit_reveal(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) == "admin" or m.from_user.id in ADMIN_IDS:
        return await m.answer("–†–∞–∑–¥–µ–ª ¬´–ê–Ω–∫–µ—Ç–∞¬ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –û—Ç–∫—Ä–æ–π /admin.",
                              reply_markup=admin_main_kb())
    if await deny_actions_during_chat(m):
        return
    if not await gate_subscription(m):
        return
    await ensure_user(m.from_user.id)

    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)
    if not u or not u[1] or not u[2]:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    ready = bool(u[3]) if u else False
    if not ready:
        await m.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å.", reply_markup=reveal_entry_menu())
        return

    txt = format_profile_text(u)
    photos = [p for p in (u[10], u[11], u[12]) if p]
    if photos:
        for p in photos[:-1]:
            await m.answer_photo(p)
        await m.answer_photo(photos[-1], caption=txt)
    else:
        await m.answer(txt)
    await m.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reveal_entry_menu())

@dp.message(F.text == "‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å")
async def fill_or_refill_btn(m: Message, state: FSMContext):
    if await deny_actions_during_chat(m):
        return
    if not await gate_subscription(m):
        return

    await ensure_user(m.from_user.id)

    # –µ—Å–ª–∏ –≤ –ø–æ–∏—Å–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∞
    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)

    # –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª/–∫–æ–≥–æ –∏—â–µ—à—å ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º –∏—Ö
    if not u or not u[1] or not u[2]:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–π –ø–æ–ª.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False, refill_mode=False)
        await state.set_state(GState.pick_gender)
        if not (m.from_user.username or ""):
            await m.answer("‚ÑπÔ∏è –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    # –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    ready = bool(u[3])
    await state.update_data(refill_mode=ready, is_refill=ready)

    # –¥–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω username
    if not await _require_username(m):
        await state.clear()
        return

    await start_reveal_form(m, state, is_refill=ready)


@dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(m: Message, state: FSMContext):
    if await deny_actions_during_chat(m):
        return
    await state.clear()
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))

# ================== –í—ã–±–æ—Ä –ø–æ–ª–∞ / –∫–æ–≥–æ –∏—â–µ–º ==================
@dp.message(GState.pick_gender)
async def pick_gender_msg(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id)
    text = (m.text or "").strip().casefold()
    if text not in {"—è –¥–µ–≤—É—à–∫–∞", "—è –ø–∞—Ä–µ–Ω—å"}:
        await m.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: ¬´–Ø –¥–µ–≤—É—à–∫–∞¬ª –∏–ª–∏ ¬´–Ø –ø–∞—Ä–µ–Ω—å¬ª.", reply_markup=gender_self_kb())
        return
    gender = "–î–µ–≤—É—à–∫–∞" if text == "—è –¥–µ–≤—É—à–∫–∞" else "–ü–∞—Ä–µ–Ω—å"

    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_gender=gender)
    else:
        await set_user_fields(m.from_user.id, gender=gender)

    await m.answer("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", reply_markup=seeking_kb())
    await state.set_state(GState.pick_seeking)

@dp.message(GState.pick_seeking)
async def pick_seeking_msg(m: Message, state: FSMContext):
    await ensure_user(m.from_user.id)
    text = (m.text or "").strip()
    if text not in {"–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏", "–ù–µ –≤–∞–∂–Ω–æ"}:
        await m.answer("–í—ã–±–µ—Ä–∏: ¬´–î–µ–≤—É—à–∫–∏¬ª, ¬´–ü–∞—Ä–Ω–∏¬ª –∏–ª–∏ ¬´–ù–µ –≤–∞–∂–Ω–æ¬ª.", reply_markup=seeking_kb())
        return

    data = await state.get_data()
    refill_mode = data.get("refill_mode")
    if refill_mode:
        await state.update_data(new_seeking=text)
        if not await _require_username(m):
            await state.clear()
            return
        await start_reveal_form(m, state, is_refill=True)
        return

    await set_user_fields(m.from_user.id, seeking=text)
    after_prefs = data.get("start_form_after_prefs", False)
    is_refill = data.get("is_refill", False)
    await state.update_data(start_form_after_prefs=False)
    await state.clear()

    if after_prefs:
        if not (m.from_user.username or ""):
            await m.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–ª—è –∞–Ω–∫–µ—Ç—ã –Ω—É–∂–µ–Ω @username. –ï–≥–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ Telegram –ø–æ–∑–∂–µ.",
                           reply_markup=(await menu_for(m.from_user.id)))
            return
        await start_reveal_form(m, state, is_refill=is_refill)
        return

    await m.answer("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=main_menu())

# ================== Reveal Form ==================
async def start_reveal_form(m: Message, state: FSMContext, is_refill: bool):
    await m.answer(
        "–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è. –ï—ë —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º !reveal.\n"
        "–ê–Ω–∫–µ—Ç—É –Ω–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=cancel_kb()
    )
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=cancel_kb())
    await state.update_data(is_refill=is_refill)
    await state.set_state(RevealForm.name)

@dp.message(RevealForm.name)
async def rf_name(m: Message, state: FSMContext):
    parts = (m.text or "").strip().split()
    first = parts[0] if parts else ""
    last = " ".join(parts[1:]) if len(parts) > 1 else ""
    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_first=first, new_last=last)
    else:
        await set_user_fields(m.from_user.id, first_name=first, last_name=last)
    await m.answer("–° –∫–∞–∫–æ–≥–æ —Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞?", reply_markup=faculties_kb())
    await state.set_state(RevealForm.faculty)

@dp.callback_query(RevealForm.faculty, F.data.startswith("fac:"))
async def rf_fac(c: CallbackQuery, state: FSMContext):
    idx = int(c.data.split(":")[1])
    fac = FACULTIES[idx]
    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_faculty=fac)
    else:
        await set_user_fields(c.from_user.id, faculty=fac)
    await c.message.edit_text(f"–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{fac}</b>")
    await c.message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=cancel_kb())
    await state.set_state(RevealForm.age)
    await c.answer()

@dp.message(RevealForm.age)
async def rf_age(m: Message, state: FSMContext):
    try:
        age = int((m.text or "").strip())
        if not (17 <= age <= 99):
            raise ValueError
    except Exception:
        await m.answer("–í–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º 17‚Äì99, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_kb())
        return
    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_age=age)
    else:
        await set_user_fields(m.from_user.id, age=age)

    u = await get_user_or_create(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_about = bool(u[8])
    await m.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                   reply_markup=about_kb(refill=refill, has_prev=has_prev_about))
    await state.set_state(RevealForm.about)

@dp.message(RevealForm.about, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def rf_about_skip(m: Message, state: FSMContext):
    data = await state.get_data()
    uname = m.from_user.username or ""
    if data.get("refill_mode"):
        await state.update_data(new_about=None, new_username=(f"@{uname}" if uname else None))
    else:
        await set_user_fields(m.from_user.id, about=None)
        await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user_or_create(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

@dp.message(RevealForm.about, F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ")
async def rf_about_keep(m: Message, state: FSMContext):
    u = await get_user(m.from_user.id)
    if not u[8]:
        await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
                       reply_markup=about_kb(refill=False, has_prev=False))
        return
    data = await state.get_data()
    # –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

@dp.message(RevealForm.about)
async def rf_about(m: Message, state: FSMContext):
    text_raw = (m.text or "").strip()
    if text_raw.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return await rf_about_skip(m, state)
    if text_raw and len(text_raw) > 300:
        await m.answer("–°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ (‚â§300 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    data = await state.get_data()
    uname = m.from_user.username or ""
    if data.get("refill_mode"):
        await state.update_data(new_about=(text_raw or None), new_username=(f"@{uname}" if uname else None))
    else:
        await set_user_fields(m.from_user.id, about=(text_raw or None))
        await set_user_fields(m.from_user.id, username=(f"@{uname}" if uname else None))

    u = await get_user(m.from_user.id)
    refill = bool(data.get("is_refill"))
    has_prev_photos = bool(u[10] or u[11] or u[12])
    await m.answer("–ü—Ä–∏—à–ª–∏ –¥–æ 3 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ).",
                   reply_markup=photos_empty_kb(refill=refill, has_prev=has_prev_photos))
    await state.set_state(RevealForm.photos)

@dp.message(RevealForm.photos, F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ")
async def rf_photos_keep(m: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("refill_mode"):
        await _commit_staged_profile(m.from_user.id, data, keep_old_photos=True)
        await state.clear()
        await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (—Ñ–æ—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
                       reply_markup=main_menu())
        return
    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ —Ñ–æ—Ç–æ). –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.",
                   reply_markup=(await menu_for(m.from_user.id)))

@dp.message(RevealForm.photos, F.photo)
async def rf_photos(m: Message, state: FSMContext):
    data = await state.get_data()
    file_id = m.photo[-1].file_id
    if data.get("refill_mode"):
        photos = list(data.get("new_photos") or [])
        if len(photos) < 3:
            photos.append(file_id)
            await state.update_data(new_photos=photos)
            idx = len(photos)
            if idx < 3:
                await m.answer(f"–§–æ—Ç–æ {idx} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
            else:
                await m.answer("–§–æ—Ç–æ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
        else:
            await m.answer("–£–∂–µ –µ—Å—Ç—å 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
        return

    u = await get_user_or_create(m.from_user.id)
    current = [u[10], u[11], u[12]]
    if current[0] is None:
        await set_user_fields(m.from_user.id, photo1=file_id)
        await m.answer("–§–æ—Ç–æ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[1] is None:
        await set_user_fields(m.from_user.id, photo2=file_id)
        await m.answer("–§–æ—Ç–æ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—â—ë?", reply_markup=photos_progress_kb())
    elif current[2] is None:
        await set_user_fields(m.from_user.id, photo3=file_id)
        await m.answer("–§–æ—Ç–æ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())
    else:
        await m.answer("–£–∂–µ –µ—Å—Ç—å 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=photos_progress_kb())

@dp.message(RevealForm.photos, F.text == "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ")
async def rf_photos_reset(m: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("refill_mode"):
        await state.update_data(new_photos=[])
        await m.answer("–í—Å–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–¥–æ 3).",
                       reply_markup=photos_empty_kb(refill=True, has_prev=True))
        return
    await set_user_fields(m.from_user.id, photo1=None, photo2=None, photo3=None)
    await m.answer("–í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–¥–æ 3).",
        reply_markup=photos_empty_kb(refill=False, has_prev=False))

@dp.message(RevealForm.photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def rf_photos_done(m: Message, state: FSMContext):
    if not await _require_username(m):
        return
    data = await state.get_data()
    if data.get("refill_mode"):
        u = await get_user(m.from_user.id)
        old_have = bool(u[10] or u[11] or u[12])
        new_photos = data.get("new_photos") or []
        if not new_photos and not old_have:
            await m.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                           reply_markup=photos_empty_kb(refill=True, has_prev=False))
            return
        await _commit_staged_profile(m.from_user.id, data, keep_old_photos=(len(new_photos) == 0))
        await state.clear()
        await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.", reply_markup=(await menu_for(m.from_user.id)))
        return

    u = await get_user(m.from_user.id)
    photos = [u[10], u[11], u[12]]
    if not any(photos):
        await m.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                       reply_markup=photos_empty_kb(refill=False, has_prev=False))
        return
    await set_user_fields(m.from_user.id, reveal_ready=1)
    await state.clear()
    await m.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.", reply_markup=(await menu_for(m.from_user.id)))

async def _commit_staged_profile(tg_id: int, staged: dict, keep_old_photos: bool = False):
    fields = {}
    if 'new_gender' in staged:  fields['gender'] = staged['new_gender']
    if 'new_seeking' in staged: fields['seeking'] = staged['new_seeking']
    if 'new_first' in staged:   fields['first_name'] = staged['new_first']
    if 'new_last' in staged:    fields['last_name'] = staged['new_last']
    if 'new_faculty' in staged: fields['faculty'] = staged['new_faculty']
    if 'new_age' in staged:     fields['age'] = staged['new_age']
    if 'new_about' in staged:   fields['about'] = staged['new_about']
    if 'new_username' in staged:fields['username'] = staged['new_username']

    if not keep_old_photos:
        photos = staged.get('new_photos') or []
        if photos:
            p1 = photos[0] if len(photos) > 0 else None
            p2 = photos[1] if len(photos) > 1 else None
            p3 = photos[2] if len(photos) > 2 else None
            fields['photo1'] = p1
            fields['photo2'] = p2
            fields['photo3'] = p3

    fields['reveal_ready'] = 1
    await set_user_fields(tg_id, **fields)

# ============================================================
#                         FIND / MATCHING
# ============================================================

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
@dp.message(Command("find"))
async def find(m: Message, state: FSMContext):
    if not await gate_subscription(m):
        return
    await ensure_user(m.from_user.id)
    if await get_role(m.from_user.id) == "admin":
        await m.answer("–ê–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /admin –¥–ª—è –ø–∞–Ω–µ–ª–∏.", reply_markup=(await menu_for(m.from_user.id)))
        return

    if not await has_required_prefs(m.from_user.id):
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
        await state.update_data(start_form_after_prefs=True, is_refill=False)
        await state.set_state(GState.pick_gender)
        return

    peer = await active_peer(m.from_user.id)
    if peer:
        await m.answer("–¢—ã —Å–µ–π—á–∞—Å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π !next –∏–ª–∏ !stop.")
        return

    if await in_queue(m.from_user.id):
        await m.answer("–£–∂–µ –∏—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ù–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.", reply_markup=cancel_kb())
        return

    u = await get_user(m.from_user.id)
    await enqueue(m.from_user.id, gender=u[1], seeking=u[2])
    await m.answer("–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶ –ü–æ–∫–∞ –∏–¥—ë—Ç –ø–æ–∏—Å–∫, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
    await try_match_now(m.from_user.id)

# ============================================================
#                           SUPPORT
# ============================================================

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_entry(m: Message, state: FSMContext):
    if await get_role(m.from_user.id) == "admin" or m.from_user.id in ADMIN_IDS:
        await m.answer("–î–ª—è –∞–¥–º–∏–Ω–æ–≤ –µ—Å—Ç—å ¬´üß∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –≤–Ω—É—Ç—Ä–∏ /admin.", reply_markup=admin_reply_menu())
        return
    if await deny_actions_during_chat(m):
        return
    await state.clear()
    await state.set_state(SupportState.waiting)
    await m.answer(
        "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º/–ø—Ä–æ–±–ª–µ–º–æ–π ‚Äî —è –ø–µ—Ä–µ—à–ª—é –∞–¥–º–∏–Ω–∞–º.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=cancel_kb()
    )

@dp.message(SupportState.waiting)
async def support_collect(m: Message, state: FSMContext):
    async with db() as conn:
        cur = await conn.execute(
            "INSERT INTO support_msgs(from_user, text) VALUES(?,?)",
            (m.from_user.id, m.text or "")
        )
        _row_id = cur.lastrowid
        await conn.commit()

    for admin_id in (ADMIN_IDS or []):
        sent = await bot.send_message(
            admin_id,
            f"üÜò –ó–∞–ø—Ä–æ—Å –æ—Ç {m.from_user.id} (@{m.from_user.username or '‚Äî'}):\n\n{m.text}"
        )
        SUPPORT_RELAY[sent.message_id] = m.from_user.id

    await m.answer("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.")

@dp.message(Command("done"))
async def support_done(m: Message):
    async with db() as conn:
        await conn.execute(
            "UPDATE support_msgs SET status='closed' WHERE from_user=? AND status='open'",
            (m.from_user.id,)
        )
        await conn.commit()
    await m.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏ —Å–Ω–æ–≤–∞: ¬´üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.")

@dp.message(F.reply_to_message, F.from_user.id.func(lambda uid: uid in ADMIN_IDS))
async def admin_reply_router(m: Message):
    uid = SUPPORT_RELAY.get(m.reply_to_message.message_id)
    if not uid:
        return
    await bot.send_message(uid, f"üõ† –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:\n{m.text}")
    await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@dp.callback_query(F.data == "adm_support")
async def adm_support(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    await c.message.edit_text("–î–∏–∞–ª–æ–≥–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):")
    async with db() as conn:
        cur = await conn.execute("""
            SELECT from_user, MAX(ts) AS last_ts
            FROM support_msgs
            WHERE status='open'
            GROUP BY from_user
            ORDER BY last_ts DESC
            LIMIT 10
        """)
        users = await cur.fetchall()

    if not users:
        return await bot.send_message(c.from_user.id, "–ü—É—Å—Ç–æ. –ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç.")

    for (uid, _) in users:
        head = await bot.send_message(
            c.from_user.id, f"<b>–î–∏–∞–ª–æ–≥ —Å {uid}</b>. –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –ª—é–±–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏–∂–µ."
        )
        SUPPORT_RELAY[head.message_id] = uid

        async with db() as conn:
            cur = await conn.execute("""
                SELECT text, ts, id FROM support_msgs
                WHERE from_user=? AND status='open'
                ORDER BY ts DESC LIMIT 5
            """, (uid,))
            msgs = list(reversed(await cur.fetchall()))

        for text, ts, _sid in msgs:
            sent = await bot.send_message(c.from_user.id, f"üÜò {uid}: {text}")
            SUPPORT_RELAY[sent.message_id] = uid

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"sup_close:{uid}")
        kb.adjust(1)
        await bot.send_message(c.from_user.id, "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–µ–ø–ª–∞–µ–º. –ò–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("sup_close:"))
async def sup_close(c: CallbackQuery):
    if c.from_user.id not in ADMIN_IDS and await get_role(c.from_user.id) != "admin":
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
    uid = int(c.data.split(":")[1])
    async with db() as conn:
        await conn.execute("UPDATE support_msgs SET status='closed' WHERE from_user=?", (uid,))
        await conn.commit()

    await c.answer("–ó–∞–∫—Ä—ã—Ç–æ.")
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    try:
        await bot.send_message(uid, "üîß –ê–¥–º–∏–Ω –∑–∞–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å ‚Äî –æ—Ç–∫—Ä–æ–π –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ¬´üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.")
    except Exception:
        pass
    await bot.send_message(c.from_user.id, "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")

@dp.callback_query(F.data.startswith("sup_open:"))
async def sup_open(c: CallbackQuery):
    if await get_role(c.from_user.id) != "admin" and c.from_user.id not in ADMIN_IDS:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    uid = int(c.data.split(":")[1])

    async with db() as conn:
        cur = await conn.execute("""
            SELECT id, text, ts FROM support_msgs
            WHERE from_user=? AND status='open'
            ORDER BY id ASC LIMIT 30
        """, (uid,))
        msgs = await cur.fetchall()

    if not msgs:
        return await c.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.", show_alert=True)

    await c.message.edit_text(f"–î–∏–∞–ª–æ–≥ —Å {uid}. –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –ª—é–±–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏–∂–µ.")
    for _mid, text, _ts in msgs:
        fwd = await bot.send_message(c.from_user.id, f"üÜò {uid}:\n{text}")
        SUPPORT_RELAY[fwd.message_id] = uid

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"sup_close:{uid}")
    await bot.send_message(c.from_user.id, "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ä–µ–ø–ª–∞–µ–º. –ò–ª–∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç:", reply_markup=kb.as_markup())

# ============================================================
#                       RELAY / CHAT HANDLERS
# ============================================================

@dp.message()
async def relay_chat(m: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–≤ RAM –∏–ª–∏ –≤ –ë–î)
    if not await is_chat_active(m.from_user.id):
        # –ù–µ –Ω–∞—à —Å–ª—É—á–∞–π ‚Äî –ø—É—Å—Ç—å –∏–¥—É—Ç –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        raise SkipHandler

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º RAM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞) –∏ –ø–æ–ª—É—á–∏–º peer/match_id
    materialized = await _materialize_session_if_needed(m.from_user.id)
    if not materialized:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–∞–ª—å—à–µ
        raise SkipHandler
    peer, mid = materialized

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –º–æ–ª—á–∞–Ω–∏—è –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    now_m = _nowm()
    DEADLINE[mid] = now_m + g_inactivity()
    LAST_SHOWN.pop(mid, None)

    now = _now()
    LAST_SEEN[m.from_user.id] = now
    LAST_SEEN[peer] = now

    await _stop_countdown(mid, m.from_user.id, peer, delete_msgs=True)
    WARNED.pop(mid, None)
    t = COUNTDOWN_TASKS.pop(mid, None)
    if t and not t.done():
        t.cancel()
    COUNTDOWN_MSGS.pop(mid, None)

    # –ö–æ–º–∞–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞
    if m.text:
        ttxt = m.text.strip().lower()
        if ttxt == "!stop":
            a = m.from_user.id
            b = peer
            await end_current_chat(a)
            _cleanup_match(mid, a, b)
            await send_post_chat_feedback(a, b, mid)
            await send_post_chat_feedback(b, a, mid)
            await m.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=(await menu_for(m.from_user.id)))
            await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await menu_for(b)))
            return

        if ttxt == "!next":
            a = m.from_user.id
            b = peer
            if not await has_required_prefs(a):
                await end_current_chat(a)
                _cleanup_match(mid, a, b)
                await send_post_chat_feedback(a, b, mid)
                await send_post_chat_feedback(b, a, mid)
                await m.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
                await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await menu_for(b)))
                return
            await record_separation(a, b)
            await end_current_chat(a)
            _cleanup_match(mid, a, b)
            me = await get_user(a)
            await enqueue(a, me[1], me[2])
            await m.answer("–ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
            await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à—ë–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.", reply_markup=(await menu_for(b)))
            await try_match_now(a)
            return

        if ttxt == "!reveal":
            await handle_reveal(m.from_user.id, peer)
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚Äî —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π
    if m.text:
        await send_text_anonym(peer, m.text)

    elif m.photo:
        await bot.send_photo(
            peer, m.photo[-1].file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.animation:
        await bot.send_animation(
            peer, m.animation.file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.video:
        await bot.send_video(
            peer, m.video.file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.audio:
        await bot.send_audio(
            peer, m.audio.file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.voice:
        await bot.send_voice(
            peer, m.voice.file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.video_note:
        await bot.send_video_note(peer, m.video_note.file_id, protect_content=True)

    elif m.document:
        await bot.send_document(
            peer, m.document.file_id,
            caption=clean_cap(m.caption),
            protect_content=True
        )

    elif m.contact or m.location or m.venue or m.poll or m.dice or m.game:
        await m.answer("–≠—Ç–æ—Ç —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ.")

# ================== –†–∞—Å–∫—Ä—ã—Ç–∏–µ ==================

async def handle_reveal(me_id: int, peer_id: int):
    me = await get_user(me_id)
    peer = await get_user(peer_id)
    if not (me and peer and me[3] == 1 and peer[3] == 1):
        await bot.send_message(me_id, "–†–∞—Å–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: —É –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞.")
        return

    async with db() as conn:
        cur = await conn.execute(
            "SELECT id,a_id,b_id,a_reveal,b_reveal FROM matches WHERE active=1 AND (a_id=? OR b_id=?) ORDER BY id DESC LIMIT 1",
            (me_id, me_id)
        )
        row = await cur.fetchone()
        if not row:
            await bot.send_message(me_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
            return
        mid, a, b, ar, br = row
        is_a = (me_id == a)

        if (is_a and ar == 1) or ((not is_a) and br == 1):
            await bot.send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
            return

        if is_a:
            await conn.execute("UPDATE matches SET a_reveal=1 WHERE id=?", (mid,))
        else:
            await conn.execute("UPDATE matches SET b_reveal=1 WHERE id=?", (mid,))
        await conn.commit()

        cur = await conn.execute("SELECT a_reveal,b_reveal FROM matches WHERE id=?", (mid,))
        ar, br = await cur.fetchone()

    if ar == 1 and br == 1:
        await send_reveal_card(a, peer_id)
        await send_reveal_card(b, me_id)
        await bot.send_message(a, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await bot.send_message(b, "–í–∑–∞–∏–º–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await bot.send_message(me_id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

async def send_reveal_card(to_id: int, whose_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É —Ä–æ–≤–Ω–æ –≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –µ—ë –≤–∏–¥–∏—Ç –≤–ª–∞–¥–µ–ª–µ—Ü:
    - –∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–ª–æ –æ—Ç format_profile_text(u)
    - —Ñ–æ—Ç–æ: –≤—Å–µ, —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ‚Äî caption
    """
    u = await get_user(whose_id)
    if not u:
        await bot.send_message(to_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    txt = format_profile_text(u)
    photos = [p for p in (u[10], u[11], u[12]) if p]

    if photos:
        for p in photos[:-1]:
            await bot.send_photo(to_id, p, protect_content=True)
        await bot.send_photo(
            to_id, photos[-1], caption=txt,
            protect_content=True
        )
    else:
        await bot.send_message(
            to_id, txt,
            parse_mode=None,
            disable_web_page_preview=True,
            protect_content=True
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ !–∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ RAM –Ω–µ—Ç, –Ω–æ –≤ –ë–î –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –µ—Å—Ç—å
@dp.message(F.text.regexp(r"^!(stop|next|reveal)\b"))
async def bang_commands_when_db_active(m: Message, state: FSMContext):
    if m.from_user.id in ACTIVE:
        return  # —Ä–∞–∑—Ä—É–ª–∏—Ç relay_chat

    mat = await _materialize_session_if_needed(m.from_user.id)
    if not mat:
        await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.")
        return

    peer, mid = mat
    txt = (m.text or "").strip().lower()

    if txt.startswith("!stop"):
        a = m.from_user.id
        b = peer
        await end_current_chat(a)
        _cleanup_match(mid, a, b)
        await send_post_chat_feedback(a, b, mid)
        await send_post_chat_feedback(b, a, mid)
        await m.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=(await menu_for(m.from_user.id)))
        await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await menu_for(b)))
        return

    if txt.startswith("!next"):
        a = m.from_user.id
        b = peer
        if not await has_required_prefs(a):
            await end_current_chat(a)
            _cleanup_match(mid, a, b)
            await send_post_chat_feedback(a, b, mid)
            await send_post_chat_feedback(b, a, mid)
            await m.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –∫–æ–≥–æ –∏—â–µ—à—å.", reply_markup=gender_self_kb())
            await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=(await menu_for(b)))
            return
        await record_separation(a, b)
        await end_current_chat(a)
        _cleanup_match(mid, a, b)
        me = await get_user(a)
        await enqueue(a, me[1], me[2])
        await m.answer("–ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=cancel_kb())
        await bot.send_message(b, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—à—ë–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å ¬´üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞¬ª.", reply_markup=(await menu_for(b)))
        await try_match_now(a)
        return

    if txt.startswith("!reveal"):
        await handle_reveal(m.from_user.id, peer)
        return

# === –§–ò–ù–ê–õ–¨–ù–´–ô –§–û–õ–ë–≠–ö –î–õ–Ø "–ù–ï–ò–ó–í–ï–°–¢–ù–´–•" –°–û–û–ë–©–ï–ù–ò–ô ===
@dp.message()
async def unknown_router(m: Message, state: FSMContext):
    # 1) –ö–æ–º–∞–Ω–¥—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî –∏—Ö –ª–æ–≤—è—Ç —Ü–µ–ª–µ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    if m.text and m.text.startswith("/"):
        return

    # 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ/–æ—á–µ—Ä–µ–¥–∏/—Ñ–æ—Ä–º–µ ‚Äî –Ω–µ –º–µ—à–∞–µ–º
    if await active_peer(m.from_user.id):
        return
    if await in_queue(m.from_user.id):
        await m.answer("–ò–¥—ë—Ç –ø–æ–∏—Å–∫. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª.", reply_markup=cancel_kb())
        return
    if await state.get_state():
        return

    # 3) –ò–Ω–∞—á–µ ‚Äî –º–µ–Ω—é
    await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=(await menu_for(m.from_user.id)))

# ================== Entry ==================
async def main():
    await init_db()
    await load_settings_cache()
    # –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)
    async with db() as conn:
        await conn.execute("UPDATE matches SET active=0 WHERE active=1 AND started_at < strftime('%s','now') - 86400")
        await conn.commit()
    print("DB path:", DB_PATH)
    # —Å–Ω—è—Ç—å read-only –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
    try:
        import stat
        if os.path.exists(DB_PATH):
            os.chmod(DB_PATH, stat.S_IWRITE | stat.S_IREAD)
    except Exception:
        pass

    print("Bot started")
    global RESOLVED_CHANNEL_ID
    try:
        chat = await bot.get_chat(CHANNEL_USERNAME)
        RESOLVED_CHANNEL_ID = chat.id  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
        print("Channel resolved id:", RESOLVED_CHANNEL_ID)
    except Exception as e:
        print("Could not resolve channel id:", repr(e))
        RESOLVED_CHANNEL_ID = None  # –æ—Å—Ç–∞–≤–∏–º None ‚Äì –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
